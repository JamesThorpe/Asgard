<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ include file="BifrostReference.t4" once="true" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="CBUS.Bifrost" #>
<#@ output extension=".cs" #>
<#	
    // The name of the CBUS OpCode spec to use for the code generation.
    var name = "cbus-4.0-Rev-8d-Guide-6b-opcodes";

    // Controls whether the IReplyTo methods are generated or not. If they are they are appended to
    // the end of the file. Should only be set true if substantial changes are made to the request
    // response definition.
    // Minor changes are best managed by hand modifying OpCodeReplImplementation.cs in Partial.
    var generate_iReplyImplementation = false;
#>
using System;

/*  This file is automatically generated by a T4 template from a data file.
    <#= name #>
    It was last generated at <#= DateTime.Now #>.
    Any changes made manually will be lost when the file is regenerated.
*/
<#	var loader = new Loader(name);
	loader.LoadResource();

	var builder = new Builder(loader);
	builder.Build();
#>

namespace Asgard.Data
{
    #region Licence

/*
<#= builder.LicenceBlock.Text #>
 *  */
    #endregion

    #region History

/*  Date		Author
<#= builder.HistoryBlock.Text #>
 *  */

    #endregion

<#	if (!string.IsNullOrEmpty(builder.FileCommentBlock?.Text))
	{
#>
/*
<#= builder.FileCommentBlock.Text #>
 *  */

<#	}
#>
    #region OpCodes

<#	foreach(var opCodeBlock in builder.OpCodeBlocks)
	{
        var requestOpCodeData =
            builder.ResponseBlocks
                .Where(n => n.ResponseOpCode.Equals(opCodeBlock.Code))
                .ToList();
        var interfaceNames = 
            opCodeBlock.Properties
                .Select(p => $"IHas{p.Name}")
                .ToList();
#>
    #region <#= $"0x{opCodeBlock.Value:X2}" #> <#= opCodeBlock.Code #> <#= opCodeBlock.Name #>

    /// <summary>
	/// <#= opCodeBlock.Code #>
    /// <#= opCodeBlock.Name #>
    /// <#= opCodeBlock.Description #>
    /// </summary>
    [OpCode(
        Code = "<#= opCodeBlock.Code #>", 
        Description = "<#= opCodeBlock.Description #>",
        Group = "<#= opCodeBlock.Group #>", 
        Name = "<#= opCodeBlock.Name #>", 
        Number = <#= opCodeBlock.Value #>, 
        Priority = <#= opCodeBlock.Priority #>)]
    public partial class <#= opCodeBlock.ClassName #> : <#= opCodeBlock.BaseClassName #>, // <#= $"0x{opCodeBlock.Value:X2}" #>
<#  foreach (var requestOpCode in requestOpCodeData)
    {
        var requestOpCodeClassName =
            builder.OpCodeBlocks
                .Where(n => n.Code == requestOpCode.RequestOpCode)
                .Select(n => n.ClassName)
                .FirstOrDefault();
        if (requestOpCodeClassName == null)
        {
#>
        // <#= requestOpCode.ResponseOpCode #> not found!
<#      }
        else
        {
#>
        IReplyTo<<#= requestOpCodeClassName #>>,
<#      }
    }
    foreach (var interfaceName in interfaceNames)
    {
#>
        <#= interfaceName #>,
<#  }
#>
        <#= opCodeBlock.InterfaceName #>
    {
        #region Fields

        public const string CODE = "<#= opCodeBlock.Code #>";
        public const string DESCRIPTION = "<#= opCodeBlock.Description #>";
        public const OpCodeGroup GROUP = OpCodeGroup.<#= opCodeBlock.Group #>;
        public const string NAME = "<#= opCodeBlock.Name #>";
        public const byte NUMBER = <#= $"0x{opCodeBlock.Value:X2}" #>; // <#= opCodeBlock.Value #>
        public const int PRIORITY = <#= opCodeBlock.Priority #>;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion
<#		if (opCodeBlock.Properties.Any())
		{
#>

        #region Properties

<#			foreach (var property in opCodeBlock.Properties)
			{
				var dataType = property.DataType[0].ToString().ToUpper() + property.DataType.Substring(1);
				if (dataType[0] == 'U') {
					dataType = property.DataType[0].ToString().ToUpper() + property.DataType[1].ToString().ToUpper() + property.DataType.Substring(2);
				}
				if (dataType.EndsWith("Enum")) dataType = "Enum";
				var generic = dataType == "Enum"
					? "<" + property.DataType + ">"
					: string.Empty;
				var byteIndex = property.ByteIndexes.Length == 1 ? property.ByteIndexes[0].ToString() : "new int[] { " + string.Join(",", property.ByteIndexes) + " }";
				var bitIndex = property.BitIndexes.Length == 0 ? "" :
					(property.BitIndexes.Length == 1 ? ", " + property.BitIndexes[0].ToString() : ", new int[] { " + string.Join(",", property.BitIndexes) + " }");

#>
        public <#= property.DataType #> <#= property.Name #>
        {
            get => ConvertTo<#= dataType #><#= generic #>(<#= byteIndex #><#= bitIndex #>);
            set => ConvertFrom<#= dataType #><#= generic #>(<#= byteIndex #><#= bitIndex #>, value);
        }
<#			}
#>

        #endregion
<#		}
#>

        #region Constructors

        public <#= opCodeBlock.ClassName #>(ICbusStandardMessage cbusMessage) : base(cbusMessage) { }
        public <#= opCodeBlock.ClassName #>() : base(CbusStandardMessage.Create(new byte[] {<#= opCodeBlock.Value #>})) {}

        #endregion

        #region Overrides

        public override string ToString() => $<#= opCodeBlock.ToStringText #>;

        #endregion
	}
	
    #endregion

<#	}
#>
    #endregion
<#  if (generate_iReplyImplementation)
    {
#>
<#      foreach(var opCodeBlock in builder.OpCodeBlocks)
        {
            var requestOpCodeData =
                builder.ResponseBlocks
                    .Where(n => n.ResponseOpCode.Equals(opCodeBlock.Code))
                    .ToList();
            if (!requestOpCodeData.Any()) continue;
#>
    public partial class <#= opCodeBlock.ClassName #>
    {
<#          foreach (var requestOpCode in requestOpCodeData)
            {
                var requestOpCodeClassName =
                    builder.OpCodeBlocks
                        .Where(n => n.Code == requestOpCode.RequestOpCode)
                        .Select(n => n.ClassName)
                        .FirstOrDefault();
                if (requestOpCodeClassName == null)
                {
#>
        // <#= requestOpCode.ResponseOpCode #> not found!
<#              }
                else
                {
#>
        public bool IsReply(<#= requestOpCodeClassName #> request) => throw new NotImplementedException();
<#              }
            }
#>
    }
<#      }
    }
#>
}
