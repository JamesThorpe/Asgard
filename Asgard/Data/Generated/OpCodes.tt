<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ include file="BifrostReference.t4" once="true" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Bifrost" #>
<#@ output extension=".cs" #>
<#	var name = "cbus-4.0-Rev-8d-Guide-6b-opcodes";
#>
using System;

/*	This file is automatically generated by a T4 template from a data file.
	<#= name #>
	It was last generated at <#= DateTime.Now #>.
	Any changes made manually will be lost when the file is regenerated.
*/
<#	var loader = new Loader(name);
	loader.LoadResource();

	var builder = new Builder(loader);
	builder.Build();
#>

namespace Asgard.Data
{
	#region Licence

/*
<#= builder.LicenceBlock.Text #>
 *	*/
	#endregion

	#region History

/*	Date		Author
<#= builder.HistoryBlock.Text #>
 *	*/

	#endregion

<#	if (!string.IsNullOrEmpty(builder.FileCommentBlock?.Text))
	{
#>
/*
<#= builder.FileCommentBlock.Text #>
 *	*/

<#	}
#>
	#region OpCodes

<#	foreach(var opCodeBlock in builder.OpCodeBlocks)
	{
		var code = opCodeBlock.Code.Substring(0, 1).ToUpper() + opCodeBlock.Code.Substring(1).ToLower();
#>
	#region <#= $"0x{opCodeBlock.Value:X2}" #> <#= opCodeBlock.Code #> <#= opCodeBlock.Name #>

	/// <summary>
	/// <#= opCodeBlock.Name #>
	/// <#= opCodeBlock.Description #>
	/// </summary>
	[OpCode(
		Code = "<#= opCodeBlock.Code #>", 
		Description = "<#= opCodeBlock.Description #>",
		Group = "<#= opCodeBlock.Group #>", 
		Name = "<#= opCodeBlock.Name #>", 
		Number = <#= opCodeBlock.Value #>, 
		Priority = <#= opCodeBlock.Priority #>)]
	public partial class <#= code #> : <#= opCodeBlock.BaseClassName #>, // <#= $"0x{opCodeBlock.Value:X2}" #>
		I<#= code #>
	{
		#region Fields

		public const string _CODE = "<#= opCodeBlock.Code #>";
		public const string _DESCRIPTION = "<#= opCodeBlock.Description #>";
		public const OpCodeGroup _GROUP = OpCodeGroup.<#= opCodeBlock.Group #>;
		public const string _NAME = "<#= opCodeBlock.Name #>";
		public const byte _NUMBER = <#= $"0x{opCodeBlock.Value:X2}" #>; // <#= opCodeBlock.Value #>
		public const int _PRIORITY = <#= opCodeBlock.Priority #>;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string OpcodeName => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion
<#		if (opCodeBlock.Properties.Any())
		{
#>

		#region Properties

<#			foreach (var property in opCodeBlock.Properties)
			{
				var dataType = property.DataType[0].ToString().ToUpper() + property.DataType.Substring(1);
				if (dataType[0] == 'U') {
					dataType = property.DataType[0].ToString().ToUpper() + property.DataType[1].ToString().ToUpper() + property.DataType.Substring(2);
				}
				if (dataType.EndsWith("Enum")) dataType = "Enum";
				var generic = dataType == "Enum"
					? "<" + property.DataType + ">"
					: string.Empty;
				var byteIndex = property.ByteIndexes.Length == 1 ? property.ByteIndexes[0].ToString() : "new int[] { " + string.Join(",", property.ByteIndexes) + " }";
				var bitIndex = property.BitIndexes.Length == 0 ? "" :
					(property.BitIndexes.Length == 1 ? ", " + property.BitIndexes[0].ToString() : ", new int[] { " + string.Join(",", property.BitIndexes) + " }");

#>
		public <#= property.DataType #> <#= property.Name #>
		{
			get => ConvertTo<#= dataType #><#= generic #>(<#= byteIndex #><#= bitIndex #>);
			set => ConvertFrom<#= dataType #><#= generic #>(<#= byteIndex #><#= bitIndex #>, value);
		}
<#			}
#>

		#endregion
<#		}
#>

		#region Constructors

		public <#= code #>(ICbusMessage cbusMessage) : base(cbusMessage) { }
		public <#= code #>() : base(CbusMessage.Create(new byte[] {<#= opCodeBlock.Value #>})) {}

		#endregion

		#region Overrides

		public override string ToString() => $<#= opCodeBlock.ToStringText #>;

		#endregion
	}
	
	#endregion

<#	}
#>
	#endregion
}
