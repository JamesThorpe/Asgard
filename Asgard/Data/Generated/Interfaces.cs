using System;

/*	This file is automatically generated by a T4 template from a data file.
	cbus-4.0-Rev-8d-Guide-6b-opcodes
	It was last generated at 12/21/2021 20:13:01.
	Any changes made manually will be lost when the file is regenerated.
*/

namespace Asgard.Data
{
	#region Licence

/*
 *	This work is licensed under the:
 *	    Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 *	To view a copy of this license, visit:
 *	    http://creativecommons.org/licenses/by-nc-sa/4.0/
 *	or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *	
 *	License summary:
 *	  You are free to:
 *	    Share, copy and redistribute the material in any medium or format
 *	    Adapt, remix, transform, and build upon the material
 *	
 *	  The licensor cannot revoke these freedoms as long as you follow the license terms.
 *	
 *	  Attribution : You must give appropriate credit, provide a link to the license,
 *	                 and indicate if changes were made. You may do so in any reasonable manner,
 *	                 but not in any way that suggests the licensor endorses you or your use.
 *	
 *	  NonCommercial : You may not use the material for commercial purposes. **(see note below)
 *	
 *	  ShareAlike : If you remix, transform, or build upon the material, you must distribute
 *	                your contributions under the same license as the original.
 *	
 *	  No additional restrictions : You may not apply legal terms or technological measures that
 *	                                legally restrict others from doing anything the license permits.
 *	
 *	 ** For commercial use, please contact the original copyright holder(s) to agree licensing terms
 *	
 *	  This software is distributed in the hope that it will be useful, but WITHOUT ANY
 *	  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE

 *	*/
	#endregion

	#region History

/*	Date		Author
 *	2021-11-06	Richard Crawshaw	Original from Developers' Guide for CBUS version 6b

 *	*/

	#endregion

	#region Interfaces

	#region 0x00 ACK General Acknowledgement

	public interface IAck
	{
	}

	#endregion

	#region 0x01 NAK General No Acknowledgement

	public interface INak
	{
	}

	#endregion

	#region 0x02 HLT Bus Halt

	public interface IHlt
	{
	}

	#endregion

	#region 0x03 BON Bus On

	public interface IBon
	{
	}

	#endregion

	#region 0x04 TOF Track Off

	public interface ITof
	{
	}

	#endregion

	#region 0x05 TON Track On

	public interface ITon
	{
	}

	#endregion

	#region 0x06 ESTOP Emergency Stop

	public interface IEstop
	{
	}

	#endregion

	#region 0x07 ARST System Reset

	public interface IArst
	{
	}

	#endregion

	#region 0x08 RTOF Request Track Off

	public interface IRtof
	{
	}

	#endregion

	#region 0x09 RTON Request Track On

	public interface IRton
	{
	}

	#endregion

	#region 0x0A RESTP Request Emergency Stop All

	public interface IRestp
	{
	}

	#endregion

	#region 0x0C RSTAT Request Command Station Status

	public interface IRstat
	{
	}

	#endregion

	#region 0x0D QNN Query Node Number

	public interface IQnn
	{
	}

	#endregion

	#region 0x10 RQNP Request node parameters

	public interface IRqnp
	{
	}

	#endregion

	#region 0x11 RQMN Request module name

	public interface IRqmn
	{
	}

	#endregion

	#region 0x21 KLOC Release Engine

	public interface IKloc
	{
		public byte Session { get; set; }
	}

	#endregion

	#region 0x22 QLOC Query Engine

	public interface IQloc
	{
		public byte Session { get; set; }
	}

	#endregion

	#region 0x23 DKEEP Session keep alive

	public interface IDkeep
	{
		public byte Session { get; set; }
	}

	#endregion

	#region 0x30 DBG1 Debug with one data byte

	public interface IDbg1
	{
		public byte DebugStatus { get; set; }
	}

	#endregion

	#region 0x3F EXTC Extended opcode with no additional bytes

	public interface IExtc
	{
		public byte ExtendedOpCode { get; set; }
	}

	#endregion

	#region 0x40 RLOC Request engine session

	public interface IRloc
	{
		public ushort Address { get; set; }
	}

	#endregion

	#region 0x41 QCON Query Consist

	public interface IQcon
	{
		public byte Consist { get; set; }
		public byte Index { get; set; }
	}

	#endregion

	#region 0x42 SNN Set Node Number

	public interface ISnn
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x43 ALOC Allocate loco to activity

	public interface IAloc
	{
		public byte Session { get; set; }
		public byte AllocationCode { get; set; }
	}

	#endregion

	#region 0x44 STMOD Set CAB session mode

	public interface IStmod
	{
		public byte Session { get; set; }
		public SpeedModeEnum SpeedMode { get; set; }
		public ServiceModeEnum ServiceMode { get; set; }
		public bool SoundMode { get; set; }
	}

	#endregion

	#region 0x45 PCON Consist Engine

	public interface IPcon
	{
		public byte Consist { get; set; }
		public byte Session { get; set; }
	}

	#endregion

	#region 0x46 KCON Remove Engine from consist

	public interface IKcon
	{
		public byte Consist { get; set; }
		public byte Session { get; set; }
	}

	#endregion

	#region 0x47 DSPD Set Engine Speed and Direction

	public interface IDspd
	{
		public byte Session { get; set; }
		public byte SpeedDir { get; set; }
	}

	#endregion

	#region 0x48 DFLG Set Engine Flags

	public interface IDflg
	{
		public byte Session { get; set; }
		public SpeedModeEnum SpeedMode { get; set; }
		public bool Lights { get; set; }
		public bool Direction { get; set; }
		public EngineStateEnum EngineState { get; set; }
	}

	#endregion

	#region 0x49 DFNON Set Engine function On

	public interface IDfnon
	{
		public byte Session { get; set; }
		public byte FunctionNumber { get; set; }
	}

	#endregion

	#region 0x4A DFNOF Set Engine function Off

	public interface IDfnof
	{
		public byte Session { get; set; }
		public byte FunctionNumber { get; set; }
	}

	#endregion

	#region 0x4C SSTAT Service mode status

	public interface ISstat
	{
		public byte Session { get; set; }
		public SessionStatusEnum SessionStatus { get; set; }
	}

	#endregion

	#region 0x50 RQNN Request node number

	public interface IRqnn
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x51 NNREL Node number release

	public interface INnrel
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x52 NNACK Node number acknowledge

	public interface INnack
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x53 NNLRN Set node into learn mode

	public interface INnlrn
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x54 NNULN Release node from learn mode

	public interface INnuln
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x55 NNCLR Clear all events from a node

	public interface INnclr
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x56 NNEVN Read number of events available in a node

	public interface INnevn
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x57 NERD Read back all stored events in a node

	public interface INerd
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x58 RQEVN Request to read number of stored events

	public interface IRqevn
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x59 WRACK Write acknowledge

	public interface IWrack
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x5A RQDAT Request node data event

	public interface IRqdat
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x5B RQDDS Request device data - short mode

	public interface IRqdds
	{
		public ushort DeviceNumber { get; set; }
	}

	#endregion

	#region 0x5C BOOTM Put node into bootload mode

	public interface IBootm
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x5D ENUM Force a self enumeration cycle for use with CAN

	public interface IEnum
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x5F EXTC1 Extended opcode with 1 additional byte

	public interface IExtc1
	{
		public byte ExtendedOpCode { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0x60 DFUN Set Engine functions

	public interface IDfun
	{
		public byte Session { get; set; }
		public FunctionRangeEnum FunctionRange { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x61 GLOC Get engine session

	public interface IGloc
	{
		public ushort Address { get; set; }
		public SessionFlagsEnum SessionFlags { get; set; }
	}

	#endregion

	#region 0x63 ERR Command Station Error report

	public interface IErr
	{
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public DccErrorCodeEnum DccErrorCode { get; set; }
	}

	#endregion

	#region 0x6F CMDERR Error messages from nodes during configuration

	public interface ICmderr
	{
		public ushort NodeNumber { get; set; }
		public AccErrorCodeEnum AccErrorCode { get; set; }
	}

	#endregion

	#region 0x70 EVNLF Event space left reply from node

	public interface IEvnlf
	{
		public ushort NodeNumber { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x71 NVRD Request read of a node variable

	public interface INvrd
	{
		public ushort NodeNumber { get; set; }
		public byte NVIndex { get; set; }
	}

	#endregion

	#region 0x72 NENRD Request read of stored events by event index

	public interface INenrd
	{
		public ushort NodeNumber { get; set; }
		public byte ENIndex { get; set; }
	}

	#endregion

	#region 0x73 RQNPN Request read of a node parameter by index

	public interface IRqnpn
	{
		public ushort NodeNumber { get; set; }
		public byte ParamIndex { get; set; }
	}

	#endregion

	#region 0x74 NUMEV Number of events stored in node

	public interface INumev
	{
		public ushort NodeNumber { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x75 CANID Set a CAN_ID in existing FLiM node

	public interface ICanid
	{
		public ushort NodeNumber { get; set; }
		public byte CAN_ID { get; set; }
	}

	#endregion

	#region 0x7F EXTC2 Extended opcode with 2 additional bytes

	public interface IExtc2
	{
		public byte ExtendedOpCode { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0x80 RDCC3 Request 3 byte DCC Packet

	public interface IRdcc3
	{
		public byte Repetitions { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0x82 WCVO Write CV (byte) in OPS mode

	public interface IWcvo
	{
		public byte Session { get; set; }
		public ushort CV { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x83 WCVB Write CB (bit) in OPS mode

	public interface IWcvb
	{
		public byte Session { get; set; }
		public ushort CV { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x84 QCVS Read CV

	public interface IQcvs
	{
		public byte Session { get; set; }
		public ushort CV { get; set; }
		public byte Mode { get; set; }
	}

	#endregion

	#region 0x85 PCVS Report CV

	public interface IPcvs
	{
		public byte Session { get; set; }
		public ushort CV { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x90 ACON Accessory On

	public interface IAcon
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
	}

	#endregion

	#region 0x91 ACOF Accessory Off

	public interface IAcof
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
	}

	#endregion

	#region 0x92 AREQ Accessory Request Event

	public interface IAreq
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
	}

	#endregion

	#region 0x93 ARON Accessory Response Event

	public interface IAron
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
	}

	#endregion

	#region 0x94 AROF Accessory Response Event

	public interface IArof
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
	}

	#endregion

	#region 0x95 EVULN Unlearn an event in learn mode

	public interface IEvuln
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
	}

	#endregion

	#region 0x96 NVSET Set a node variable

	public interface INvset
	{
		public ushort NodeNumber { get; set; }
		public byte NVIndex { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x97 NVANS Response to a request for a node variable value

	public interface INvans
	{
		public ushort NodeNumber { get; set; }
		public byte NVIndex { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x98 ASON Accessory Short On

	public interface IAson
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
	}

	#endregion

	#region 0x99 ASOF Accessory Short Off

	public interface IAsof
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
	}

	#endregion

	#region 0x9A ASRQ Accessory Short Request Event

	public interface IAsrq
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
	}

	#endregion

	#region 0x9B PARAN Response to request for individual node parameter

	public interface IParan
	{
		public ushort NodeNumber { get; set; }
		public byte ParamIndex { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x9C REVAL Request for read of an event variable

	public interface IReval
	{
		public ushort NodeNumber { get; set; }
		public byte ENIndex { get; set; }
		public byte EVIndex { get; set; }
	}

	#endregion

	#region 0x9D ARSON Accessory Short Response Event On

	public interface IArson
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
	}

	#endregion

	#region 0x9E ARSOF Accessory Short Response Event Off

	public interface IArsof
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
	}

	#endregion

	#region 0x9F EXTC3 Extended opcode with 3 additional bytes

	public interface IExtc3
	{
		public byte ExtendedOpCode { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xA0 RDCC4 Request 4 byte DCC Packet

	public interface IRdcc4
	{
		public byte Repetitions { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
	}

	#endregion

	#region 0xA2 WCVS Write CV in Service mode

	public interface IWcvs
	{
		public byte Session { get; set; }
		public ushort CV { get; set; }
		public ServiceModeEnum ServiceMode { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0xB0 ACON1 Accessory On

	public interface IAcon1
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0xB1 ACOF1 Accessory Off

	public interface IAcof1
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0xB2 REQEV Read event variable in learn mode

	public interface IReqev
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte EVIndex { get; set; }
	}

	#endregion

	#region 0xB3 ARON1 Accessory Response Event

	public interface IAron1
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0xB4 AROF1 Accessory Response Event

	public interface IArof1
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0xB5 NEVAL Response to request for read of EV value

	public interface INeval
	{
		public ushort NodeNumber { get; set; }
		public byte EVIndex { get; set; }
		public byte ENIndex { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0xB6 PNN Response to Query Node

	public interface IPnn
	{
		public ushort NodeNumber { get; set; }
		public byte ManufId { get; set; }
		public byte ModuleId { get; set; }
		public NodeFlagsEnum NodeFlags { get; set; }
	}

	#endregion

	#region 0xB8 ASON1 Accessory Short On

	public interface IAson1
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0xB9 ASOF1 Accessory Short Off

	public interface IAsof1
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0xBD ARSON1 Accessory Short Response Event

	public interface IArson1
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0xBE ARSOF1 Accessory Short Response Event

	public interface IArsof1
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0xBF EXTC4 Extended opcode with 4 data bytes

	public interface IExtc4
	{
		public byte ExtendedOpCode { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
	}

	#endregion

	#region 0xC0 RDCC5 Request 5 byte DCC Packet

	public interface IRdcc5
	{
		public byte Repetitions { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
		public byte Data5 { get; set; }
	}

	#endregion

	#region 0xC1 WCVOA Write CV (byte) in OPS mode by address

	public interface IWcvoa
	{
		public ushort Address { get; set; }
		public ushort CV { get; set; }
		public byte Mode { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0xCF FCLK Fast Clock

	public interface IFclk
	{
		public byte Minutes { get; set; }
		public byte Hours { get; set; }
		public WeekdayEnum Weekday { get; set; }
		public MonthEnum Month { get; set; }
		public byte Div { get; set; }
		public byte MonthDay { get; set; }
		public byte Temperature { get; set; }
	}

	#endregion

	#region 0xD0 ACON2 Accessory On

	public interface IAcon2
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0xD1 ACOF2 Accessory Off

	public interface IAcof2
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0xD2 EVLRN Teach an event in learn mode

	public interface IEvlrn
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte EVIndex { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0xD3 EVANS Response to a request for an EV value in a node in learn mode

	public interface IEvans
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte EVIndex { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0xD4 ARON2 Accessory Response Event

	public interface IAron2
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0xD5 AROF2 Accessory Response Event

	public interface IArof2
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0xD8 ASON2 Accessory Short On

	public interface IAson2
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0xD9 ASOF2 Accessory Short Off

	public interface IAsof2
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0xDD ARSON2 Accessory Short Response with 2 data bytes

	public interface IArson2
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0xDE ARSOF2 Accessory Short Response with 2 data bytes

	public interface IArsof2
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0xDF EXTC5 Extended opcode with 5 data bytes

	public interface IExtc5
	{
		public byte ExtendedOpCode { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
		public byte Data5 { get; set; }
	}

	#endregion

	#region 0xE0 RDCC6 Request 6 byte DCC packet

	public interface IRdcc6
	{
		public byte Repetitions { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
		public byte Data5 { get; set; }
		public byte Data6 { get; set; }
	}

	#endregion

	#region 0xE1 PLOC Engine report

	public interface IPloc
	{
		public byte Session { get; set; }
		public ushort Address { get; set; }
		public byte SpeedDir { get; set; }
		public byte Fn1 { get; set; }
		public byte Fn2 { get; set; }
		public byte Fn3 { get; set; }
	}

	#endregion

	#region 0xE2 NAME Response to request for node name string

	public interface IName
	{
		public char Char1 { get; set; }
		public char Char2 { get; set; }
		public char Char3 { get; set; }
		public char Char4 { get; set; }
		public char Char5 { get; set; }
		public char Char6 { get; set; }
		public char Char7 { get; set; }
	}

	#endregion

	#region 0xE3 STAT Command Station status report

	public interface IStat
	{
		public ushort NodeNumber { get; set; }
		public byte CSNumber { get; set; }
		public CSFlagsEnum CSFlags { get; set; }
		public byte Major { get; set; }
		public byte Minor { get; set; }
		public byte Build { get; set; }
	}

	#endregion

	#region 0xEF PARAMS Response to request for node parameters

	public interface IParams
	{
		public byte Param1 { get; set; }
		public byte Param2 { get; set; }
		public byte Param3 { get; set; }
		public byte Param4 { get; set; }
		public byte Param5 { get; set; }
		public byte Param6 { get; set; }
		public byte Param7 { get; set; }
	}

	#endregion

	#region 0xF0 ACON3 Accessory On

	public interface IAcon3
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xF1 ACOF3 Accessory Off

	public interface IAcof3
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xF2 ENRSP Response to request to read node events

	public interface IEnrsp
	{
		public ushort NodeNumber { get; set; }
		public uint EventData { get; set; }
		public byte ENIndex { get; set; }
	}

	#endregion

	#region 0xF3 ARON3 Accessory Response Event On

	public interface IAron3
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xF4 AROF3 Accessory Response Event Off

	public interface IArof3
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xF5 EVLRNI Teach an event in learn mode using event indexing

	public interface IEvlrni
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte ENIndex { get; set; }
		public byte EVIndex { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0xF6 ACDAT Accessory node data event

	public interface IAcdat
	{
		public ushort NodeNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
		public byte Data5 { get; set; }
	}

	#endregion

	#region 0xF7 ARDAT Accessory node data Response

	public interface IArdat
	{
		public ushort NodeNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
		public byte Data5 { get; set; }
	}

	#endregion

	#region 0xF8 ASON3 Accessory Short On

	public interface IAson3
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xF9 ASOF3 Accessory Short Off

	public interface IAsof3
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xFA DDES Device data event (short mode)

	public interface IDdes
	{
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
		public byte Data5 { get; set; }
	}

	#endregion

	#region 0xFB DDRS Device data response (short mode)

	public interface IDdrs
	{
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
		public byte Data5 { get; set; }
	}

	#endregion

	#region 0xFD ARSON3 Accessory Short Response Event

	public interface IArson3
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xFE ARSOF3 Accessory Short Response Event

	public interface IArsof3
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xFF EXTC6 Extended opcode with 6 da bytes

	public interface IExtc6
	{
		public byte ExtendedOpCode { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
		public byte Data5 { get; set; }
		public byte Data6 { get; set; }
	}

	#endregion

	#endregion
}
