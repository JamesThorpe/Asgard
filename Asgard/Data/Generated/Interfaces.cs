
using System;

/*	This file is automatically generated by a T4 template from a data file.
	cbus-4.0-Rev-8d-Guide-6b-opcodes
	It was last generated at 12/22/2021 22:12:52.
	Any changes made manually will be lost when the file is regenerated.
*/

namespace Asgard.Data
{
	#region Licence

/*
 *	This work is licensed under the:
 *	    Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 *	To view a copy of this license, visit:
 *	    http://creativecommons.org/licenses/by-nc-sa/4.0/
 *	or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *	
 *	License summary:
 *	  You are free to:
 *	    Share, copy and redistribute the material in any medium or format
 *	    Adapt, remix, transform, and build upon the material
 *	
 *	  The licensor cannot revoke these freedoms as long as you follow the license terms.
 *	
 *	  Attribution : You must give appropriate credit, provide a link to the license,
 *	                 and indicate if changes were made. You may do so in any reasonable manner,
 *	                 but not in any way that suggests the licensor endorses you or your use.
 *	
 *	  NonCommercial : You may not use the material for commercial purposes. **(see note below)
 *	
 *	  ShareAlike : If you remix, transform, or build upon the material, you must distribute
 *	                your contributions under the same license as the original.
 *	
 *	  No additional restrictions : You may not apply legal terms or technological measures that
 *	                                legally restrict others from doing anything the license permits.
 *	
 *	 ** For commercial use, please contact the original copyright holder(s) to agree licensing terms
 *	
 *	  This software is distributed in the hope that it will be useful, but WITHOUT ANY
 *	  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE

 *	*/
	#endregion

	#region History

/*	Date		Author
 *	2021-11-06	Richard Crawshaw	Original from Developers' Guide for CBUS version 6b

 *	*/

	#endregion

	#region Interfaces

	#region 0x00 ACK General Acknowledgement

	public interface IGeneralAcknowledgement
	{
	}

	#endregion

	#region 0x01 NAK General No Acknowledgement

	public interface IGeneralNoAcknowledgement
	{
	}

	#endregion

	#region 0x02 HLT Bus Halt

	public interface IBusHalt
	{
	}

	#endregion

	#region 0x03 BON Bus On

	public interface IBusOn
	{
	}

	#endregion

	#region 0x04 TOF Track Off

	public interface ITrackOff
	{
	}

	#endregion

	#region 0x05 TON Track On

	public interface ITrackOn
	{
	}

	#endregion

	#region 0x06 ESTOP Emergency Stop

	public interface IEmergencyStop
	{
	}

	#endregion

	#region 0x07 ARST System Reset

	public interface ISystemReset
	{
	}

	#endregion

	#region 0x08 RTOF Request Track Off

	public interface IRequestTrackOff
	{
	}

	#endregion

	#region 0x09 RTON Request Track On

	public interface IRequestTrackOn
	{
	}

	#endregion

	#region 0x0A RESTP Request Emergency Stop All

	public interface IRequestEmergencyStopAll
	{
	}

	#endregion

	#region 0x0C RSTAT Request Command Station Status

	public interface IRequestCommandStationStatus
	{
	}

	#endregion

	#region 0x0D QNN Query Node Number

	public interface IQueryNodeNumber
	{
	}

	#endregion

	#region 0x10 RQNP Request node parameters

	public interface IRequestNodeParameters
	{
	}

	#endregion

	#region 0x11 RQMN Request module name

	public interface IRequestModuleName
	{
	}

	#endregion

	#region 0x21 KLOC Release Engine

	public interface IReleaseEngine
	{
		public byte Session { get; set; }
	}

	#endregion

	#region 0x22 QLOC Query Engine

	public interface IQueryEngine
	{
		public byte Session { get; set; }
	}

	#endregion

	#region 0x23 DKEEP Session keep alive

	public interface ISessionKeepAlive
	{
		public byte Session { get; set; }
	}

	#endregion

	#region 0x30 DBG1 Debug with one data byte

	public interface IDebugWithOneDataByte
	{
		public byte DebugStatus { get; set; }
	}

	#endregion

	#region 0x3F EXTC Extended opcode with no additional bytes

	public interface IExtendedOpcodeWithNoAdditionalBytes
	{
		public byte ExtendedOpCode { get; set; }
	}

	#endregion

	#region 0x40 RLOC Request engine session

	public interface IRequestEngineSession
	{
		public ushort Address { get; set; }
	}

	#endregion

	#region 0x41 QCON Query Consist

	public interface IQueryConsist
	{
		public byte Consist { get; set; }
		public byte Index { get; set; }
	}

	#endregion

	#region 0x42 SNN Set Node Number

	public interface ISetNodeNumber
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x43 ALOC Allocate loco to activity

	public interface IAllocateLocoToActivity
	{
		public byte Session { get; set; }
		public byte AllocationCode { get; set; }
	}

	#endregion

	#region 0x44 STMOD Set CAB session mode

	public interface ISetCabSessionMode
	{
		public byte Session { get; set; }
		public SpeedModeEnum SpeedMode { get; set; }
		public ServiceModeEnum ServiceMode { get; set; }
		public bool SoundMode { get; set; }
	}

	#endregion

	#region 0x45 PCON Consist Engine

	public interface IConsistEngine
	{
		public byte Consist { get; set; }
		public byte Session { get; set; }
	}

	#endregion

	#region 0x46 KCON Remove Engine from consist

	public interface IRemoveEngineFromConsist
	{
		public byte Consist { get; set; }
		public byte Session { get; set; }
	}

	#endregion

	#region 0x47 DSPD Set Engine Speed and Direction

	public interface ISetEngineSpeedAndDirection
	{
		public byte Session { get; set; }
		public byte SpeedDir { get; set; }
	}

	#endregion

	#region 0x48 DFLG Set Engine Flags

	public interface ISetEngineFlags
	{
		public byte Session { get; set; }
		public SpeedModeEnum SpeedMode { get; set; }
		public bool Lights { get; set; }
		public bool Direction { get; set; }
		public EngineStateEnum EngineState { get; set; }
	}

	#endregion

	#region 0x49 DFNON Set Engine function On

	public interface ISetEngineFunctionOn
	{
		public byte Session { get; set; }
		public byte FunctionNumber { get; set; }
	}

	#endregion

	#region 0x4A DFNOF Set Engine function Off

	public interface ISetEngineFunctionOff
	{
		public byte Session { get; set; }
		public byte FunctionNumber { get; set; }
	}

	#endregion

	#region 0x4C SSTAT Service mode status

	public interface IServiceModeStatus
	{
		public byte Session { get; set; }
		public SessionStatusEnum SessionStatus { get; set; }
	}

	#endregion

	#region 0x50 RQNN Request node number

	public interface IRequestNodeNumber
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x51 NNREL Node number release

	public interface INodeNumberRelease
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x52 NNACK Node number acknowledge

	public interface INodeNumberAcknowledge
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x53 NNLRN Set node into learn mode

	public interface ISetNodeIntoLearnMode
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x54 NNULN Release node from learn mode

	public interface IReleaseNodeFromLearnMode
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x55 NNCLR Clear all events from a node

	public interface IClearAllEventsFromANode
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x56 NNEVN Read number of events available in a node

	public interface IReadNumberOfEventsAvailableInANode
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x57 NERD Read back all stored events in a node

	public interface IReadBackAllStoredEventsInANode
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x58 RQEVN Request to read number of stored events

	public interface IRequestToReadNumberOfStoredEvents
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x59 WRACK Write acknowledge

	public interface IWriteAcknowledge
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x5A RQDAT Request node data event

	public interface IRequestNodeDataEvent
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x5B RQDDS Request device data - short mode

	public interface IRequestDeviceDataShortMode
	{
		public ushort DeviceNumber { get; set; }
	}

	#endregion

	#region 0x5C BOOTM Put node into bootload mode

	public interface IPutNodeIntoBootloadMode
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x5D ENUM Force a self enumeration cycle for use with CAN

	public interface IForceASelfEnumerationCycleForUseWithCan
	{
		public ushort NodeNumber { get; set; }
	}

	#endregion

	#region 0x5F EXTC1 Extended opcode with 1 additional byte

	public interface IExtendedOpcodeWith1AdditionalByte
	{
		public byte ExtendedOpCode { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0x60 DFUN Set Engine functions

	public interface ISetEngineFunctions
	{
		public byte Session { get; set; }
		public FunctionRangeEnum FunctionRange { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x61 GLOC Get engine session

	public interface IGetEngineSession
	{
		public ushort Address { get; set; }
		public SessionFlagsEnum SessionFlags { get; set; }
	}

	#endregion

	#region 0x63 ERR Command Station Error report

	public interface ICommandStationErrorReport
	{
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public DccErrorCodeEnum DccErrorCode { get; set; }
	}

	#endregion

	#region 0x6F CMDERR Error messages from nodes during configuration

	public interface IErrorMessagesFromNodesDuringConfiguration
	{
		public ushort NodeNumber { get; set; }
		public AccErrorCodeEnum AccErrorCode { get; set; }
	}

	#endregion

	#region 0x70 EVNLF Event space left reply from node

	public interface IEventSpaceLeftReplyFromNode
	{
		public ushort NodeNumber { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x71 NVRD Request read of a node variable

	public interface IRequestReadOfANodeVariable
	{
		public ushort NodeNumber { get; set; }
		public byte NVIndex { get; set; }
	}

	#endregion

	#region 0x72 NENRD Request read of stored events by event index

	public interface IRequestReadOfStoredEventsByEventIndex
	{
		public ushort NodeNumber { get; set; }
		public byte ENIndex { get; set; }
	}

	#endregion

	#region 0x73 RQNPN Request read of a node parameter by index

	public interface IRequestReadOfANodeParameterByIndex
	{
		public ushort NodeNumber { get; set; }
		public byte ParamIndex { get; set; }
	}

	#endregion

	#region 0x74 NUMEV Number of events stored in node

	public interface INumberOfEventsStoredInNode
	{
		public ushort NodeNumber { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x75 CANID Set a CAN_ID in existing FLiM node

	public interface ISetACan_idInExistingFlimNode
	{
		public ushort NodeNumber { get; set; }
		public byte CAN_ID { get; set; }
	}

	#endregion

	#region 0x7F EXTC2 Extended opcode with 2 additional bytes

	public interface IExtendedOpcodeWith2AdditionalBytes
	{
		public byte ExtendedOpCode { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0x80 RDCC3 Request 3 byte DCC Packet

	public interface IRequest3ByteDccPacket
	{
		public byte Repetitions { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0x82 WCVO Write CV (byte) in OPS mode

	public interface IWriteCvByteInOpsMode
	{
		public byte Session { get; set; }
		public ushort CV { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x83 WCVB Write CB (bit) in OPS mode

	public interface IWriteCbBitInOpsMode
	{
		public byte Session { get; set; }
		public ushort CV { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x84 QCVS Read CV

	public interface IReadCv
	{
		public byte Session { get; set; }
		public ushort CV { get; set; }
		public byte Mode { get; set; }
	}

	#endregion

	#region 0x85 PCVS Report CV

	public interface IReportCv
	{
		public byte Session { get; set; }
		public ushort CV { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x90 ACON Accessory On

	public interface IAccessoryOn
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
	}

	#endregion

	#region 0x91 ACOF Accessory Off

	public interface IAccessoryOff
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
	}

	#endregion

	#region 0x92 AREQ Accessory Request Event

	public interface IAccessoryRequestEvent
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
	}

	#endregion

	#region 0x93 ARON Accessory On Response Event

	public interface IAccessoryOnResponseEvent
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
	}

	#endregion

	#region 0x94 AROF Accessory Off Response Event

	public interface IAccessoryOffResponseEvent
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
	}

	#endregion

	#region 0x95 EVULN Unlearn an event in learn mode

	public interface IUnlearnAnEventInLearnMode
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
	}

	#endregion

	#region 0x96 NVSET Set a node variable

	public interface ISetANodeVariable
	{
		public ushort NodeNumber { get; set; }
		public byte NVIndex { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x97 NVANS Response to a request for a node variable value

	public interface IResponseToARequestForANodeVariableValue
	{
		public ushort NodeNumber { get; set; }
		public byte NVIndex { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x98 ASON Accessory Short On

	public interface IAccessoryShortOn
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
	}

	#endregion

	#region 0x99 ASOF Accessory Short Off

	public interface IAccessoryShortOff
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
	}

	#endregion

	#region 0x9A ASRQ Accessory Short Request Event

	public interface IAccessoryShortRequestEvent
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
	}

	#endregion

	#region 0x9B PARAN Response to request for individual node parameter

	public interface IResponseToRequestForIndividualNodeParameter
	{
		public ushort NodeNumber { get; set; }
		public byte ParamIndex { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0x9C REVAL Request for read of an event variable

	public interface IRequestForReadOfAnEventVariable
	{
		public ushort NodeNumber { get; set; }
		public byte ENIndex { get; set; }
		public byte EVIndex { get; set; }
	}

	#endregion

	#region 0x9D ARSON Accessory Short Response On

	public interface IAccessoryShortResponseOn
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
	}

	#endregion

	#region 0x9E ARSOF Accessory Short Response Off

	public interface IAccessoryShortResponseOff
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
	}

	#endregion

	#region 0x9F EXTC3 Extended opcode with 3 additional bytes

	public interface IExtendedOpcodeWith3AdditionalBytes
	{
		public byte ExtendedOpCode { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xA0 RDCC4 Request 4 byte DCC Packet

	public interface IRequest4ByteDccPacket
	{
		public byte Repetitions { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
	}

	#endregion

	#region 0xA2 WCVS Write CV in Service mode

	public interface IWriteCvInServiceMode
	{
		public byte Session { get; set; }
		public ushort CV { get; set; }
		public ServiceModeEnum ServiceMode { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0xB0 ACON1 Accessory On 1

	public interface IAccessoryOn1
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0xB1 ACOF1 Accessory Off 1

	public interface IAccessoryOff1
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0xB2 REQEV Read event variable in learn mode

	public interface IReadEventVariableInLearnMode
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte EVIndex { get; set; }
	}

	#endregion

	#region 0xB3 ARON1 Accessory On Response Event 1

	public interface IAccessoryOnResponseEvent1
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0xB4 AROF1 Accessory Off Response Event 1

	public interface IAccessoryOffResponseEvent1
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0xB5 NEVAL Response to request for read of EV value

	public interface IResponseToRequestForReadOfEvValue
	{
		public ushort NodeNumber { get; set; }
		public byte EVIndex { get; set; }
		public byte ENIndex { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0xB6 PNN Response to Query Node

	public interface IResponseToQueryNode
	{
		public ushort NodeNumber { get; set; }
		public byte ManufId { get; set; }
		public byte ModuleId { get; set; }
		public NodeFlagsEnum NodeFlags { get; set; }
	}

	#endregion

	#region 0xB8 ASON1 Accessory Short On 1

	public interface IAccessoryShortOn1
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0xB9 ASOF1 Accessory Short Off 1

	public interface IAccessoryShortOff1
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0xBD ARSON1 Accessory Short Response On 1

	public interface IAccessoryShortResponseOn1
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0xBE ARSOF1 Accessory Short Response Off 1

	public interface IAccessoryShortResponseOff1
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
	}

	#endregion

	#region 0xBF EXTC4 Extended opcode with 4 data bytes

	public interface IExtendedOpcodeWith4DataBytes
	{
		public byte ExtendedOpCode { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
	}

	#endregion

	#region 0xC0 RDCC5 Request 5 byte DCC Packet

	public interface IRequest5ByteDccPacket
	{
		public byte Repetitions { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
		public byte Data5 { get; set; }
	}

	#endregion

	#region 0xC1 WCVOA Write CV (byte) in OPS mode by address

	public interface IWriteCvByteInOpsModeByAddress
	{
		public ushort Address { get; set; }
		public ushort CV { get; set; }
		public byte Mode { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0xCF FCLK Fast Clock

	public interface IFastClock
	{
		public byte Minutes { get; set; }
		public byte Hours { get; set; }
		public WeekdayEnum Weekday { get; set; }
		public MonthEnum Month { get; set; }
		public byte Div { get; set; }
		public byte MonthDay { get; set; }
		public byte Temperature { get; set; }
	}

	#endregion

	#region 0xD0 ACON2 Accessory On 2

	public interface IAccessoryOn2
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0xD1 ACOF2 Accessory Off 2

	public interface IAccessoryOff2
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0xD2 EVLRN Teach an event in learn mode

	public interface ITeachAnEventInLearnMode
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte EVIndex { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0xD3 EVANS Response to a request for an EV value in a node in learn mode

	public interface IResponseToARequestForAnEvValueInANodeInLearnMode
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte EVIndex { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0xD4 ARON2 Accessory On Response Event 2

	public interface IAccessoryOnResponseEvent2
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0xD5 AROF2 Accessory Off Response Event 2

	public interface IAccessoryOffResponseEvent2
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0xD8 ASON2 Accessory Short On 2

	public interface IAccessoryShortOn2
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0xD9 ASOF2 Accessory Short Off 2

	public interface IAccessoryShortOff2
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0xDD ARSON2 Accessory Short Response On 2

	public interface IAccessoryShortResponseOn2
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0xDE ARSOF2 Accessory Short Response Off 2

	public interface IAccessoryShortResponseOff2
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
	}

	#endregion

	#region 0xDF EXTC5 Extended opcode with 5 data bytes

	public interface IExtendedOpcodeWith5DataBytes
	{
		public byte ExtendedOpCode { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
		public byte Data5 { get; set; }
	}

	#endregion

	#region 0xE0 RDCC6 Request 6 byte DCC packet

	public interface IRequest6ByteDccPacket
	{
		public byte Repetitions { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
		public byte Data5 { get; set; }
		public byte Data6 { get; set; }
	}

	#endregion

	#region 0xE1 PLOC Engine report

	public interface IEngineReport
	{
		public byte Session { get; set; }
		public ushort Address { get; set; }
		public byte SpeedDir { get; set; }
		public byte Fn1 { get; set; }
		public byte Fn2 { get; set; }
		public byte Fn3 { get; set; }
	}

	#endregion

	#region 0xE2 NAME Response to request for node name string

	public interface IResponseToRequestForNodeNameString
	{
		public char Char1 { get; set; }
		public char Char2 { get; set; }
		public char Char3 { get; set; }
		public char Char4 { get; set; }
		public char Char5 { get; set; }
		public char Char6 { get; set; }
		public char Char7 { get; set; }
	}

	#endregion

	#region 0xE3 STAT Command Station status report

	public interface ICommandStationStatusReport
	{
		public ushort NodeNumber { get; set; }
		public byte CSNumber { get; set; }
		public CSFlagsEnum CSFlags { get; set; }
		public byte Major { get; set; }
		public byte Minor { get; set; }
		public byte Build { get; set; }
	}

	#endregion

	#region 0xEF PARAMS Response to request for node parameters

	public interface IResponseToRequestForNodeParameters
	{
		public byte Param1 { get; set; }
		public byte Param2 { get; set; }
		public byte Param3 { get; set; }
		public byte Param4 { get; set; }
		public byte Param5 { get; set; }
		public byte Param6 { get; set; }
		public byte Param7 { get; set; }
	}

	#endregion

	#region 0xF0 ACON3 Accessory On 3

	public interface IAccessoryOn3
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xF1 ACOF3 Accessory Off 3

	public interface IAccessoryOff3
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xF2 ENRSP Response to request to read node events

	public interface IResponseToRequestToReadNodeEvents
	{
		public ushort NodeNumber { get; set; }
		public uint EventData { get; set; }
		public byte ENIndex { get; set; }
	}

	#endregion

	#region 0xF3 ARON3 Accessory On Response Event 3

	public interface IAccessoryOnResponseEvent3
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xF4 AROF3 Accessory Off Response Event 3

	public interface IAccessoryOffResponseEvent3
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xF5 EVLRNI Teach an event in learn mode using event indexing

	public interface ITeachAnEventInLearnModeUsingEventIndexing
	{
		public ushort NodeNumber { get; set; }
		public ushort EventNumber { get; set; }
		public byte ENIndex { get; set; }
		public byte EVIndex { get; set; }
		public byte Value { get; set; }
	}

	#endregion

	#region 0xF6 ACDAT Accessory node data event

	public interface IAccessoryNodeDataEvent
	{
		public ushort NodeNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
		public byte Data5 { get; set; }
	}

	#endregion

	#region 0xF7 ARDAT Accessory node data Response

	public interface IAccessoryNodeDataResponse
	{
		public ushort NodeNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
		public byte Data5 { get; set; }
	}

	#endregion

	#region 0xF8 ASON3 Accessory Short On 3

	public interface IAccessoryShortOn3
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xF9 ASOF3 Accessory Short Off 3

	public interface IAccessoryShortOff3
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xFA DDES Device data event (short mode)

	public interface IDeviceDataEventShortMode
	{
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
		public byte Data5 { get; set; }
	}

	#endregion

	#region 0xFB DDRS Device data response (short mode)

	public interface IDeviceDataResponseShortMode
	{
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
		public byte Data5 { get; set; }
	}

	#endregion

	#region 0xFD ARSON3 Accessory Short Response On 3

	public interface IAccessoryShortResponseOn3
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xFE ARSOF3 Accessory Short Response Off 3

	public interface IAccessoryShortResponseOff3
	{
		public ushort NodeNumber { get; set; }
		public ushort DeviceNumber { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
	}

	#endregion

	#region 0xFF EXTC6 Extended opcode with 6 da bytes

	public interface IExtendedOpcodeWith6DaBytes
	{
		public byte ExtendedOpCode { get; set; }
		public byte Data1 { get; set; }
		public byte Data2 { get; set; }
		public byte Data3 { get; set; }
		public byte Data4 { get; set; }
		public byte Data5 { get; set; }
		public byte Data6 { get; set; }
	}

	#endregion

	#endregion
}
