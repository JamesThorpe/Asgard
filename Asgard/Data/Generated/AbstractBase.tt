<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
<#@ include file="Common.t4" once="true" #>
<#	var filename = "cbus-opcodes.txt";
	var fullpath = this.Host.ResolvePath(filename);
#>
using System;

/*	This file is automatically generated by a T4 template from a data file.
	<#= filename #>
	Any changes made manually will be lost when the file is regenerated.
*/
<#	var loader = new Loader(fullpath);
	loader.Load();

	var builder = new Builder(loader);
	builder.Build();
#>

namespace Asgard.Data
{
	#region Licence

/*
<#= builder.LicenceBlock.Text #>
 *	*/
	#endregion

	#region History

/*	Date		Author
<#= builder.HistoryBlock.Text #>
 *	*/

	#endregion

<#	if (!string.IsNullOrEmpty(builder.FileCommentBlock?.Text))
	{
#>
/*
<#= builder.FileCommentBlock.Text #>
 *	*/

<#	}
#>
	#region Common abstract base class

	/// <summary>
	/// Abstract base class for all OpCodes.
	/// </summary>
	public abstract partial class OpCodeData :
		ICbusOpCode
	{
		public static OpCodeData Create(ICbusMessage message)
		{
			return message[0] switch
			{
<#	foreach (var opcode in builder.OpCodeBlocks)
	{
#>
                <#= $"0x{opcode.Value:X2}" #> => new <#= opcode.Code #>(message),
<#	}
#>
				_ => null,
			};
		}
	}

	#endregion

<#	foreach (var suffix in builder.OpCodeBaseAbstractClassSuffixes)
	{
#>
	#region Abstract base class for OpCodes with <#= suffix #> data bytes

	/// <summary>
	/// Abstract base class for OpCodes with <#= suffix #> data bytes.
	/// </summary>
	public abstract partial class OpCodeData<#= suffix #> : OpCodeData
	{
		public const int DATA_LENGTH = <#= suffix #>;

		public override sealed int DataLength => DATA_LENGTH;

		protected OpCodeData<#= suffix #>(ICbusMessage cbusMessage) : base(cbusMessage) { }
	}
	
	#endregion

<#	}
#>
}
