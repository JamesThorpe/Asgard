using System;

/*	This file is automatically generated by a T4 template from a data file.
	C:\Users\richa\source\repos\Asgard\Asgard\Generated\cbus-opcodes.txt
	Any changes made manually will be lost when the file is regenerated.
*/

namespace Asgard.Data
{
	#region Licence

/*
 *	This work is licensed under the:
 *	    Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 *	To view a copy of this license, visit:
 *	    http://creativecommons.org/licenses/by-nc-sa/4.0/
 *	or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *	
 *	License summary:
 *	  You are free to:
 *	    Share, copy and redistribute the material in any medium or format
 *	    Adapt, remix, transform, and build upon the material
 *	
 *	  The licensor cannot revoke these freedoms as long as you follow the license terms.
 *	
 *	  Attribution : You must give appropriate credit, provide a link to the license,
 *	                 and indicate if changes were made. You may do so in any reasonable manner,
 *	                 but not in any way that suggests the licensor endorses you or your use.
 *	
 *	  NonCommercial : You may not use the material for commercial purposes. **(see note below)
 *	
 *	  ShareAlike : If you remix, transform, or build upon the material, you must distribute
 *	                your contributions under the same license as the original.
 *	
 *	  No additional restrictions : You may not apply legal terms or technological measures that
 *	                                legally restrict others from doing anything the license permits.
 *	
 *	 ** For commercial use, please contact the original copyright holder(s) to agree licensing terms
 *	
 *	  This software is distributed in the hope that it will be useful, but WITHOUT ANY
 *	  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE

 *	*/
	#endregion

	#region History

/*	Date		Author
 *	2021-11-06	Richard Crawshaw	Original from Developers' Guide for CBUS version 6b

 *	*/

	#endregion

	#region OpCodes

	#region 0x00 ACK General Acknowledgement

	/// <summary>
	/// General Acknowledgement
	/// Positive response to query / request performed or report of availability on-line.
	/// </summary>
	[OpCode(
		Code = "ACK", 
		Description = "Positive response to query / request performed or report of availability on-line.",
		Group = "General", 
		Name = "General Acknowledgement", 
		Number = 0, 
		Priority = 2)]
	public partial class ACK : OpCodeData0 // 0x00
	{
		#region Fields

		public const string _CODE = "ACK";
		public const string _DESCRIPTION = "Positive response to query / request performed or report of availability on-line.";
		public const OpCodeGroup _GROUP = OpCodeGroup.General;
		public const string _NAME = "General Acknowledgement";
		public const byte _NUMBER = 0x00; // 0
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Constructors

		public ACK(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number}";

		#endregion
	}
	
	#endregion

	#region 0x01 NAK General No Acknowledgement

	/// <summary>
	/// General No Acknowledgement
	/// Negative response to query / request denied.
	/// </summary>
	[OpCode(
		Code = "NAK", 
		Description = "Negative response to query / request denied.",
		Group = "General", 
		Name = "General No Acknowledgement", 
		Number = 1, 
		Priority = 2)]
	public partial class NAK : OpCodeData0 // 0x01
	{
		#region Fields

		public const string _CODE = "NAK";
		public const string _DESCRIPTION = "Negative response to query / request denied.";
		public const OpCodeGroup _GROUP = OpCodeGroup.General;
		public const string _NAME = "General No Acknowledgement";
		public const byte _NUMBER = 0x01; // 1
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Constructors

		public NAK(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number}";

		#endregion
	}
	
	#endregion

	#region 0x02 HLT Bus Halt

	/// <summary>
	/// Bus Halt
	/// Commonly broadcasted to all nodes to indicate CBUS is not available and no further packets should be sent until a BON or ARST is received.
	/// </summary>
	[OpCode(
		Code = "HLT", 
		Description = "Commonly broadcasted to all nodes to indicate CBUS is not available and no further packets should be sent until a BON or ARST is received.",
		Group = "General", 
		Name = "Bus Halt", 
		Number = 2, 
		Priority = 0)]
	public partial class HLT : OpCodeData0 // 0x02
	{
		#region Fields

		public const string _CODE = "HLT";
		public const string _DESCRIPTION = "Commonly broadcasted to all nodes to indicate CBUS is not available and no further packets should be sent until a BON or ARST is received.";
		public const OpCodeGroup _GROUP = OpCodeGroup.General;
		public const string _NAME = "Bus Halt";
		public const byte _NUMBER = 0x02; // 2
		public const int _PRIORITY = 0;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Constructors

		public HLT(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number}";

		#endregion
	}
	
	#endregion

	#region 0x03 BON Bus On

	/// <summary>
	/// Bus On
	/// Commonly broadcasted to all nodes to indicate CBUS is available following a HLT.
	/// </summary>
	[OpCode(
		Code = "BON", 
		Description = "Commonly broadcasted to all nodes to indicate CBUS is available following a HLT.",
		Group = "General", 
		Name = "Bus On", 
		Number = 3, 
		Priority = 1)]
	public partial class BON : OpCodeData0 // 0x03
	{
		#region Fields

		public const string _CODE = "BON";
		public const string _DESCRIPTION = "Commonly broadcasted to all nodes to indicate CBUS is available following a HLT.";
		public const OpCodeGroup _GROUP = OpCodeGroup.General;
		public const string _NAME = "Bus On";
		public const byte _NUMBER = 0x03; // 3
		public const int _PRIORITY = 1;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Constructors

		public BON(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number}";

		#endregion
	}
	
	#endregion

	#region 0x04 TOF Track Off

	/// <summary>
	/// Track Off
	/// Commonly broadcasted to all nodes by a command station to indicate track power is off and no further command packets should be sent
	/// </summary>
	[OpCode(
		Code = "TOF", 
		Description = "Commonly broadcasted to all nodes by a command station to indicate track power is off and no further command packets should be sent",
		Group = "DCC", 
		Name = "Track Off", 
		Number = 4, 
		Priority = 1)]
	public partial class TOF : OpCodeData0 // 0x04
	{
		#region Fields

		public const string _CODE = "TOF";
		public const string _DESCRIPTION = "Commonly broadcasted to all nodes by a command station to indicate track power is off and no further command packets should be sent";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Track Off";
		public const byte _NUMBER = 0x04; // 4
		public const int _PRIORITY = 1;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Constructors

		public TOF(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number}";

		#endregion
	}
	
	#endregion

	#region 0x05 TON Track On

	/// <summary>
	/// Track On
	/// Commonly broadcasted to all nodes by a command station to indicate track power is on.
	/// </summary>
	[OpCode(
		Code = "TON", 
		Description = "Commonly broadcasted to all nodes by a command station to indicate track power is on.",
		Group = "DCC", 
		Name = "Track On", 
		Number = 5, 
		Priority = 1)]
	public partial class TON : OpCodeData0 // 0x05
	{
		#region Fields

		public const string _CODE = "TON";
		public const string _DESCRIPTION = "Commonly broadcasted to all nodes by a command station to indicate track power is on.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Track On";
		public const byte _NUMBER = 0x05; // 5
		public const int _PRIORITY = 1;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Constructors

		public TON(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number}";

		#endregion
	}
	
	#endregion

	#region 0x06 ESTOP Emergency Stop

	/// <summary>
	/// Emergency Stop
	/// Commonly broadcast to all nodes by a command station to indicate all engines have been emergency stopped.
	/// </summary>
	[OpCode(
		Code = "ESTOP", 
		Description = "Commonly broadcast to all nodes by a command station to indicate all engines have been emergency stopped.",
		Group = "DCC", 
		Name = "Emergency Stop", 
		Number = 6, 
		Priority = 1)]
	public partial class ESTOP : OpCodeData0 // 0x06
	{
		#region Fields

		public const string _CODE = "ESTOP";
		public const string _DESCRIPTION = "Commonly broadcast to all nodes by a command station to indicate all engines have been emergency stopped.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Emergency Stop";
		public const byte _NUMBER = 0x06; // 6
		public const int _PRIORITY = 1;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Constructors

		public ESTOP(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number}";

		#endregion
	}
	
	#endregion

	#region 0x07 ARST System Reset

	/// <summary>
	/// System Reset
	/// Commonly broadcasted to all nodes to indicate a full system reset.
	/// </summary>
	[OpCode(
		Code = "ARST", 
		Description = "Commonly broadcasted to all nodes to indicate a full system reset.",
		Group = "General", 
		Name = "System Reset", 
		Number = 7, 
		Priority = 0)]
	public partial class ARST : OpCodeData0 // 0x07
	{
		#region Fields

		public const string _CODE = "ARST";
		public const string _DESCRIPTION = "Commonly broadcasted to all nodes to indicate a full system reset.";
		public const OpCodeGroup _GROUP = OpCodeGroup.General;
		public const string _NAME = "System Reset";
		public const byte _NUMBER = 0x07; // 7
		public const int _PRIORITY = 0;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Constructors

		public ARST(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number}";

		#endregion
	}
	
	#endregion

	#region 0x08 RTOF Request Track Off

	/// <summary>
	/// Request Track Off
	/// Sent to request change of track power state to “off”.
	/// </summary>
	[OpCode(
		Code = "RTOF", 
		Description = "Sent to request change of track power state to “off”.",
		Group = "DCC", 
		Name = "Request Track Off", 
		Number = 8, 
		Priority = 1)]
	public partial class RTOF : OpCodeData0 // 0x08
	{
		#region Fields

		public const string _CODE = "RTOF";
		public const string _DESCRIPTION = "Sent to request change of track power state to “off”.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Request Track Off";
		public const byte _NUMBER = 0x08; // 8
		public const int _PRIORITY = 1;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Constructors

		public RTOF(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number}";

		#endregion
	}
	
	#endregion

	#region 0x09 RTON Request Track On

	/// <summary>
	/// Request Track On
	/// Sent to request change of track power state to “on”.
	/// </summary>
	[OpCode(
		Code = "RTON", 
		Description = "Sent to request change of track power state to “on”.",
		Group = "DCC", 
		Name = "Request Track On", 
		Number = 9, 
		Priority = 1)]
	public partial class RTON : OpCodeData0 // 0x09
	{
		#region Fields

		public const string _CODE = "RTON";
		public const string _DESCRIPTION = "Sent to request change of track power state to “on”.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Request Track On";
		public const byte _NUMBER = 0x09; // 9
		public const int _PRIORITY = 1;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Constructors

		public RTON(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number}";

		#endregion
	}
	
	#endregion

	#region 0x0A RESTP Request Emergency Stop All

	/// <summary>
	/// Request Emergency Stop All
	/// Sent to request an emergency stop to all trains . Does not affect accessory control.
	/// </summary>
	[OpCode(
		Code = "RESTP", 
		Description = "Sent to request an emergency stop to all trains . Does not affect accessory control.",
		Group = "DCC", 
		Name = "Request Emergency Stop All", 
		Number = 10, 
		Priority = 0)]
	public partial class RESTP : OpCodeData0 // 0x0A
	{
		#region Fields

		public const string _CODE = "RESTP";
		public const string _DESCRIPTION = "Sent to request an emergency stop to all trains . Does not affect accessory control.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Request Emergency Stop All";
		public const byte _NUMBER = 0x0A; // 10
		public const int _PRIORITY = 0;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Constructors

		public RESTP(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number}";

		#endregion
	}
	
	#endregion

	#region 0x0C RSTAT Request Command Station Status

	/// <summary>
	/// Request Command Station Status
	/// Sent to query the status of the command station.
	/// </summary>
	[OpCode(
		Code = "RSTAT", 
		Description = "Sent to query the status of the command station.",
		Group = "Config", 
		Name = "Request Command Station Status", 
		Number = 12, 
		Priority = 2)]
	public partial class RSTAT : OpCodeData0 // 0x0C
	{
		#region Fields

		public const string _CODE = "RSTAT";
		public const string _DESCRIPTION = "Sent to query the status of the command station.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Request Command Station Status";
		public const byte _NUMBER = 0x0C; // 12
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Constructors

		public RSTAT(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number}";

		#endregion
	}
	
	#endregion

	#region 0x0D QNN Query Node Number

	/// <summary>
	/// Query Node Number
	/// Sent by a node to elicit a PNN reply from each node on the bus that has a node number.
	/// </summary>
	[OpCode(
		Code = "QNN", 
		Description = "Sent by a node to elicit a PNN reply from each node on the bus that has a node number.",
		Group = "Config", 
		Name = "Query Node Number", 
		Number = 13, 
		Priority = 3)]
	public partial class QNN : OpCodeData0 // 0x0D
	{
		#region Fields

		public const string _CODE = "QNN";
		public const string _DESCRIPTION = "Sent by a node to elicit a PNN reply from each node on the bus that has a node number.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Query Node Number";
		public const byte _NUMBER = 0x0D; // 13
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Constructors

		public QNN(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number}";

		#endregion
	}
	
	#endregion

	#region 0x10 RQNP Request node parameters

	/// <summary>
	/// Request node parameters
	/// Sent to a node while in ‘setup’ mode to read its parameter set.
	/// </summary>
	[OpCode(
		Code = "RQNP", 
		Description = "Sent to a node while in ‘setup’ mode to read its parameter set.",
		Group = "Config", 
		Name = "Request node parameters", 
		Number = 16, 
		Priority = 3)]
	public partial class RQNP : OpCodeData0 // 0x10
	{
		#region Fields

		public const string _CODE = "RQNP";
		public const string _DESCRIPTION = "Sent to a node while in ‘setup’ mode to read its parameter set.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Request node parameters";
		public const byte _NUMBER = 0x10; // 16
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Constructors

		public RQNP(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number}";

		#endregion
	}
	
	#endregion

	#region 0x11 RQMN Request module name

	/// <summary>
	/// Request module name
	/// Sent by a node to request the name of the type of module that is in setup mode.
	/// </summary>
	[OpCode(
		Code = "RQMN", 
		Description = "Sent by a node to request the name of the type of module that is in setup mode.",
		Group = "Config", 
		Name = "Request module name", 
		Number = 17, 
		Priority = 2)]
	public partial class RQMN : OpCodeData0 // 0x11
	{
		#region Fields

		public const string _CODE = "RQMN";
		public const string _DESCRIPTION = "Sent by a node to request the name of the type of module that is in setup mode.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Request module name";
		public const byte _NUMBER = 0x11; // 17
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Constructors

		public RQMN(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number}";

		#endregion
	}
	
	#endregion

	#region 0x21 KLOC Release Engine

	/// <summary>
	/// Release Engine
	/// Sent by a CAB to the Command Station. The engine with that Session number is removed from the active engine list.
	/// </summary>
	[OpCode(
		Code = "KLOC", 
		Description = "Sent by a CAB to the Command Station. The engine with that Session number is removed from the active engine list.",
		Group = "DCC", 
		Name = "Release Engine", 
		Number = 33, 
		Priority = 2)]
	public partial class KLOC : OpCodeData1 // 0x21
	{
		#region Fields

		public const string _CODE = "KLOC";
		public const string _DESCRIPTION = "Sent by a CAB to the Command Station. The engine with that Session number is removed from the active engine list.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Release Engine";
		public const byte _NUMBER = 0x21; // 33
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}

		#endregion

		#region Constructors

		public KLOC(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session}";

		#endregion
	}
	
	#endregion

	#region 0x22 QLOC Query Engine

	/// <summary>
	/// Query Engine
	/// The command station responds with PLOC if the session is assigned. Otherwise responds with ERR: engine not found.
	/// </summary>
	[OpCode(
		Code = "QLOC", 
		Description = "The command station responds with PLOC if the session is assigned. Otherwise responds with ERR: engine not found.",
		Group = "DCC", 
		Name = "Query Engine", 
		Number = 34, 
		Priority = 2)]
	public partial class QLOC : OpCodeData1 // 0x22
	{
		#region Fields

		public const string _CODE = "QLOC";
		public const string _DESCRIPTION = "The command station responds with PLOC if the session is assigned. Otherwise responds with ERR: engine not found.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Query Engine";
		public const byte _NUMBER = 0x22; // 34
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}

		#endregion

		#region Constructors

		public QLOC(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session}";

		#endregion
	}
	
	#endregion

	#region 0x23 DKEEP Session keep alive

	/// <summary>
	/// Session keep alive
	/// The cab sends a keep alive at regular intervals for the active session. The interval between keep alive messages must be less than the session timeout implemented by the command station.
	/// </summary>
	[OpCode(
		Code = "DKEEP", 
		Description = "The cab sends a keep alive at regular intervals for the active session. The interval between keep alive messages must be less than the session timeout implemented by the command station.",
		Group = "DCC", 
		Name = "Session keep alive", 
		Number = 35, 
		Priority = 2)]
	public partial class DKEEP : OpCodeData1 // 0x23
	{
		#region Fields

		public const string _CODE = "DKEEP";
		public const string _DESCRIPTION = "The cab sends a keep alive at regular intervals for the active session. The interval between keep alive messages must be less than the session timeout implemented by the command station.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Session keep alive";
		public const byte _NUMBER = 0x23; // 35
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}

		#endregion

		#region Constructors

		public DKEEP(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session}";

		#endregion
	}
	
	#endregion

	#region 0x30 DBG1 Debug with one data byte

	/// <summary>
	/// Debug with one data byte
	/// The data is a freeform status byte for debugging during CBUS module development. Not used during normal operation.
	/// </summary>
	[OpCode(
		Code = "DBG1", 
		Description = "The data is a freeform status byte for debugging during CBUS module development. Not used during normal operation.",
		Group = "General", 
		Name = "Debug with one data byte", 
		Number = 48, 
		Priority = 2)]
	public partial class DBG1 : OpCodeData1 // 0x30
	{
		#region Fields

		public const string _CODE = "DBG1";
		public const string _DESCRIPTION = "The data is a freeform status byte for debugging during CBUS module development. Not used during normal operation.";
		public const OpCodeGroup _GROUP = OpCodeGroup.General;
		public const string _NAME = "Debug with one data byte";
		public const byte _NUMBER = 0x30; // 48
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte DebugStatus
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}

		#endregion

		#region Constructors

		public DBG1(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.DebugStatus:X2}";

		#endregion
	}
	
	#endregion

	#region 0x3F EXTC Extended opcode with no additional bytes

	/// <summary>
	/// Extended opcode with no additional bytes
	/// Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.
	/// </summary>
	[OpCode(
		Code = "EXTC", 
		Description = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.",
		Group = "General", 
		Name = "Extended opcode with no additional bytes", 
		Number = 63, 
		Priority = 3)]
	public partial class EXTC : OpCodeData1 // 0x3F
	{
		#region Fields

		public const string _CODE = "EXTC";
		public const string _DESCRIPTION = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.";
		public const OpCodeGroup _GROUP = OpCodeGroup.General;
		public const string _NAME = "Extended opcode with no additional bytes";
		public const byte _NUMBER = 0x3F; // 63
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte ExtendedOpCode
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}

		#endregion

		#region Constructors

		public EXTC(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.ExtendedOpCode:X2}";

		#endregion
	}
	
	#endregion

	#region 0x40 RLOC Request engine session

	/// <summary>
	/// Request engine session
	/// The command station responds with (PLOC) if engine is free and is being assigned. Otherwise responds with (ERR): engine in use or (ERR:) stack full. This command is typically sent by a cab to the command station following a change of the controlled decoder address. RLOC is exactly equivalent to GLOC with all flag bits set to zero
	/// </summary>
	[OpCode(
		Code = "RLOC", 
		Description = "The command station responds with (PLOC) if engine is free and is being assigned. Otherwise responds with (ERR): engine in use or (ERR:) stack full. This command is typically sent by a cab to the command station following a change of the controlled decoder address. RLOC is exactly equivalent to GLOC with all flag bits set to zero",
		Group = "DCC", 
		Name = "Request engine session", 
		Number = 64, 
		Priority = 2)]
	public partial class RLOC : OpCodeData2 // 0x40
	{
		#region Fields

		public const string _CODE = "RLOC";
		public const string _DESCRIPTION = "The command station responds with (PLOC) if engine is free and is being assigned. Otherwise responds with (ERR): engine in use or (ERR:) stack full. This command is typically sent by a cab to the command station following a change of the controlled decoder address. RLOC is exactly equivalent to GLOC with all flag bits set to zero";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Request engine session";
		public const byte _NUMBER = 0x40; // 64
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short Address
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}

		#endregion

		#region Constructors

		public RLOC(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Address}";

		#endregion
	}
	
	#endregion

	#region 0x41 QCON Query Consist

	/// <summary>
	/// Query Consist
	/// Allows enumeration of a consist. Command station responds with PLOC if an engine exists at the specified index
	/// </summary>
	[OpCode(
		Code = "QCON", 
		Description = "Allows enumeration of a consist. Command station responds with PLOC if an engine exists at the specified index",
		Group = "DCC", 
		Name = "Query Consist", 
		Number = 65, 
		Priority = 2)]
	public partial class QCON : OpCodeData2 // 0x41
	{
		#region Fields

		public const string _CODE = "QCON";
		public const string _DESCRIPTION = "Allows enumeration of a consist. Command station responds with PLOC if an engine exists at the specified index";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Query Consist";
		public const byte _NUMBER = 0x41; // 65
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Consist
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte Index
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}

		#endregion

		#region Constructors

		public QCON(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Consist} {this.Index}";

		#endregion
	}
	
	#endregion

	#region 0x42 SNN Set Node Number

	/// <summary>
	/// Set Node Number
	/// Sent by a configuration tool to assign a node number to a requesting node in response to a RQNN message. The target node must be in ‘setup’ mode.
	/// </summary>
	[OpCode(
		Code = "SNN", 
		Description = "Sent by a configuration tool to assign a node number to a requesting node in response to a RQNN message. The target node must be in ‘setup’ mode.",
		Group = "Config", 
		Name = "Set Node Number", 
		Number = 66, 
		Priority = 3)]
	public partial class SNN : OpCodeData2 // 0x42
	{
		#region Fields

		public const string _CODE = "SNN";
		public const string _DESCRIPTION = "Sent by a configuration tool to assign a node number to a requesting node in response to a RQNN message. The target node must be in ‘setup’ mode.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Set Node Number";
		public const byte _NUMBER = 0x42; // 66
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}

		#endregion

		#region Constructors

		public SNN(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber}";

		#endregion
	}
	
	#endregion

	#region 0x43 ALOC Allocate loco to activity

	/// <summary>
	/// Allocate loco to activity
	/// Allocate a loco to an activity.
	/// </summary>
	[OpCode(
		Code = "ALOC", 
		Description = "Allocate a loco to an activity.",
		Group = "DCC", 
		Name = "Allocate loco to activity", 
		Number = 67, 
		Priority = 2)]
	public partial class ALOC : OpCodeData2 // 0x43
	{
		#region Fields

		public const string _CODE = "ALOC";
		public const string _DESCRIPTION = "Allocate a loco to an activity.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Allocate loco to activity";
		public const byte _NUMBER = 0x43; // 67
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte AllocationCode
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}

		#endregion

		#region Constructors

		public ALOC(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session} {this.AllocationCode}";

		#endregion
	}
	
	#endregion

	#region 0x44 STMOD Set CAB session mode

	/// <summary>
	/// Set CAB session mode
	/// Set the CAB session mode.
	/// </summary>
	[OpCode(
		Code = "STMOD", 
		Description = "Set the CAB session mode.",
		Group = "DCC", 
		Name = "Set CAB session mode", 
		Number = 68, 
		Priority = 2)]
	public partial class STMOD : OpCodeData2 // 0x44
	{
		#region Fields

		public const string _CODE = "STMOD";
		public const string _DESCRIPTION = "Set the CAB session mode.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Set CAB session mode";
		public const byte _NUMBER = 0x44; // 68
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public SpeedModeEnum SpeedMode
		{
			get => ConvertToEnum<SpeedModeEnum>(2, new int[] { 0,1 });
			set => ConvertFromEnum<SpeedModeEnum>(2, new int[] { 0,1 }, value);
		}
		public ServiceModeEnum ServiceMode
		{
			get => ConvertToEnum<ServiceModeEnum>(2, 2);
			set => ConvertFromEnum<ServiceModeEnum>(2, 2, value);
		}
		public bool SoundMode
		{
			get => ConvertToBool(2, 3);
			set => ConvertFromBool(2, 3, value);
		}

		#endregion

		#region Constructors

		public STMOD(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session} {this.SpeedMode:F} {this.ServiceMode:F} {(this.SoundMode ? "On" : "Off")}";

		#endregion
	}
	
	#endregion

	#region 0x45 PCON Consist Engine

	/// <summary>
	/// Consist Engine
	/// Adds a decoder to a consist.
	/// </summary>
	[OpCode(
		Code = "PCON", 
		Description = "Adds a decoder to a consist.",
		Group = "DCC", 
		Name = "Consist Engine", 
		Number = 69, 
		Priority = 2)]
	public partial class PCON : OpCodeData2 // 0x45
	{
		#region Fields

		public const string _CODE = "PCON";
		public const string _DESCRIPTION = "Adds a decoder to a consist.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Consist Engine";
		public const byte _NUMBER = 0x45; // 69
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Consist
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}
		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}

		#endregion

		#region Constructors

		public PCON(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session} {this.Consist}";

		#endregion
	}
	
	#endregion

	#region 0x46 KCON Remove Engine from consist

	/// <summary>
	/// Remove Engine from consist
	/// Removes a loco from a consist.
	/// </summary>
	[OpCode(
		Code = "KCON", 
		Description = "Removes a loco from a consist.",
		Group = "DCC", 
		Name = "Remove Engine from consist", 
		Number = 70, 
		Priority = 2)]
	public partial class KCON : OpCodeData2 // 0x46
	{
		#region Fields

		public const string _CODE = "KCON";
		public const string _DESCRIPTION = "Removes a loco from a consist.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Remove Engine from consist";
		public const byte _NUMBER = 0x46; // 70
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Consist
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}
		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}

		#endregion

		#region Constructors

		public KCON(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session} {this.Consist}";

		#endregion
	}
	
	#endregion

	#region 0x47 DSPD Set Engine Speed and Direction

	/// <summary>
	/// Set Engine Speed and Direction
	/// Sent by a CAB or equivalent to request an engine speed/dir change.
	/// </summary>
	[OpCode(
		Code = "DSPD", 
		Description = "Sent by a CAB or equivalent to request an engine speed/dir change.",
		Group = "DCC", 
		Name = "Set Engine Speed and Direction", 
		Number = 71, 
		Priority = 2)]
	public partial class DSPD : OpCodeData2 // 0x47
	{
		#region Fields

		public const string _CODE = "DSPD";
		public const string _DESCRIPTION = "Sent by a CAB or equivalent to request an engine speed/dir change.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Set Engine Speed and Direction";
		public const byte _NUMBER = 0x47; // 71
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte SpeedDir
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}

		#endregion

		#region Constructors

		public DSPD(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session} {this.SpeedDir}";

		#endregion
	}
	
	#endregion

	#region 0x48 DFLG Set Engine Flags

	/// <summary>
	/// Set Engine Flags
	/// Sent by a cab to notify the command station of a change in engine flags.
	/// </summary>
	[OpCode(
		Code = "DFLG", 
		Description = "Sent by a cab to notify the command station of a change in engine flags.",
		Group = "DCC", 
		Name = "Set Engine Flags", 
		Number = 72, 
		Priority = 2)]
	public partial class DFLG : OpCodeData2 // 0x48
	{
		#region Fields

		public const string _CODE = "DFLG";
		public const string _DESCRIPTION = "Sent by a cab to notify the command station of a change in engine flags.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Set Engine Flags";
		public const byte _NUMBER = 0x48; // 72
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public SpeedModeEnum SpeedMode
		{
			get => ConvertToEnum<SpeedModeEnum>(2, new int[] { 0,1 });
			set => ConvertFromEnum<SpeedModeEnum>(2, new int[] { 0,1 }, value);
		}
		public bool Lights
		{
			get => ConvertToBool(2, 2);
			set => ConvertFromBool(2, 2, value);
		}
		public bool Direction
		{
			get => ConvertToBool(2, 3);
			set => ConvertFromBool(2, 3, value);
		}
		public EngineStateEnum EngineState
		{
			get => ConvertToEnum<EngineStateEnum>(2, new int[] { 4,5 });
			set => ConvertFromEnum<EngineStateEnum>(2, new int[] { 4,5 }, value);
		}

		#endregion

		#region Constructors

		public DFLG(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session} {this.SpeedMode:F} {(this.Lights ? "On" : "Off")} {(this.Direction ? "F" : "R")} {this.EngineState:F}";

		#endregion
	}
	
	#endregion

	#region 0x49 DFNON Set Engine function On

	/// <summary>
	/// Set Engine function On
	/// Sent by a cab to turn on a specific loco function. This provides an alternative method to DFUN for controlling loco functions. A command station must implement both methods.
	/// </summary>
	[OpCode(
		Code = "DFNON", 
		Description = "Sent by a cab to turn on a specific loco function. This provides an alternative method to DFUN for controlling loco functions. A command station must implement both methods.",
		Group = "DCC", 
		Name = "Set Engine function On", 
		Number = 73, 
		Priority = 2)]
	public partial class DFNON : OpCodeData2 // 0x49
	{
		#region Fields

		public const string _CODE = "DFNON";
		public const string _DESCRIPTION = "Sent by a cab to turn on a specific loco function. This provides an alternative method to DFUN for controlling loco functions. A command station must implement both methods.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Set Engine function On";
		public const byte _NUMBER = 0x49; // 73
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte FunctionNumber
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}

		#endregion

		#region Constructors

		public DFNON(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session} {this.FunctionNumber}";

		#endregion
	}
	
	#endregion

	#region 0x4A DFNOF Set Engine function Off

	/// <summary>
	/// Set Engine function Off
	/// Sent by a cab to turn off a specific loco function. This provides an alternative method to DFUN for controlling loco functions. A command station must implement both methods.
	/// </summary>
	[OpCode(
		Code = "DFNOF", 
		Description = "Sent by a cab to turn off a specific loco function. This provides an alternative method to DFUN for controlling loco functions. A command station must implement both methods.",
		Group = "DCC", 
		Name = "Set Engine function Off", 
		Number = 74, 
		Priority = 2)]
	public partial class DFNOF : OpCodeData2 // 0x4A
	{
		#region Fields

		public const string _CODE = "DFNOF";
		public const string _DESCRIPTION = "Sent by a cab to turn off a specific loco function. This provides an alternative method to DFUN for controlling loco functions. A command station must implement both methods.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Set Engine function Off";
		public const byte _NUMBER = 0x4A; // 74
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte FunctionNumber
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}

		#endregion

		#region Constructors

		public DFNOF(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session} {this.FunctionNumber}";

		#endregion
	}
	
	#endregion

	#region 0x4C SSTAT Service mode status

	/// <summary>
	/// Service mode status
	/// Status returned by command station/programmer at end of programming operation that does not return data.
	/// </summary>
	[OpCode(
		Code = "SSTAT", 
		Description = "Status returned by command station/programmer at end of programming operation that does not return data.",
		Group = "DCC", 
		Name = "Service mode status", 
		Number = 76, 
		Priority = 3)]
	public partial class SSTAT : OpCodeData2 // 0x4C
	{
		#region Fields

		public const string _CODE = "SSTAT";
		public const string _DESCRIPTION = "Status returned by command station/programmer at end of programming operation that does not return data.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Service mode status";
		public const byte _NUMBER = 0x4C; // 76
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public SessionStatusEnum SessionStatus
		{
			get => ConvertToEnum<SessionStatusEnum>(2);
			set => ConvertFromEnum<SessionStatusEnum>(2, value);
		}

		#endregion

		#region Constructors

		public SSTAT(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session} {this.SessionStatus:F}";

		#endregion
	}
	
	#endregion

	#region 0x50 RQNN Request node number

	/// <summary>
	/// Request node number
	/// Sent by a node that is in setup/configuration mode and requests assignment of a node number (NN). The node allocating node numbers responds with (SNN) which contains the newly assigned node number. <NN hi> and <NN lo> are the existing node number
	/// </summary>
	[OpCode(
		Code = "RQNN", 
		Description = "Sent by a node that is in setup/configuration mode and requests assignment of a node number (NN). The node allocating node numbers responds with (SNN) which contains the newly assigned node number. <NN hi> and <NN lo> are the existing node number",
		Group = "Config", 
		Name = "Request node number", 
		Number = 80, 
		Priority = 3)]
	public partial class RQNN : OpCodeData2 // 0x50
	{
		#region Fields

		public const string _CODE = "RQNN";
		public const string _DESCRIPTION = "Sent by a node that is in setup/configuration mode and requests assignment of a node number (NN). The node allocating node numbers responds with (SNN) which contains the newly assigned node number. <NN hi> and <NN lo> are the existing node number";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Request node number";
		public const byte _NUMBER = 0x50; // 80
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}

		#endregion

		#region Constructors

		public RQNN(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber}";

		#endregion
	}
	
	#endregion

	#region 0x51 NNREL Node number release

	/// <summary>
	/// Node number release
	/// Sent by node when taken out of service. e.g. when reverting to SLiM mode.
	/// </summary>
	[OpCode(
		Code = "NNREL", 
		Description = "Sent by node when taken out of service. e.g. when reverting to SLiM mode.",
		Group = "Config", 
		Name = "Node number release", 
		Number = 81, 
		Priority = 3)]
	public partial class NNREL : OpCodeData2 // 0x51
	{
		#region Fields

		public const string _CODE = "NNREL";
		public const string _DESCRIPTION = "Sent by node when taken out of service. e.g. when reverting to SLiM mode.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Node number release";
		public const byte _NUMBER = 0x51; // 81
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}

		#endregion

		#region Constructors

		public NNREL(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber}";

		#endregion
	}
	
	#endregion

	#region 0x52 NNACK Node number acknowledge

	/// <summary>
	/// Node number acknowledge
	/// Sent by a node to verify its presence and confirm its node id. This message is sent to acknowledge an SNN.
	/// </summary>
	[OpCode(
		Code = "NNACK", 
		Description = "Sent by a node to verify its presence and confirm its node id. This message is sent to acknowledge an SNN.",
		Group = "Config", 
		Name = "Node number acknowledge", 
		Number = 82, 
		Priority = 3)]
	public partial class NNACK : OpCodeData2 // 0x52
	{
		#region Fields

		public const string _CODE = "NNACK";
		public const string _DESCRIPTION = "Sent by a node to verify its presence and confirm its node id. This message is sent to acknowledge an SNN.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Node number acknowledge";
		public const byte _NUMBER = 0x52; // 82
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}

		#endregion

		#region Constructors

		public NNACK(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber}";

		#endregion
	}
	
	#endregion

	#region 0x53 NNLRN Set node into learn mode

	/// <summary>
	/// Set node into learn mode
	/// Sent by a configuration tool to put a specific node into learn mode.
	/// </summary>
	[OpCode(
		Code = "NNLRN", 
		Description = "Sent by a configuration tool to put a specific node into learn mode.",
		Group = "Config", 
		Name = "Set node into learn mode", 
		Number = 83, 
		Priority = 3)]
	public partial class NNLRN : OpCodeData2 // 0x53
	{
		#region Fields

		public const string _CODE = "NNLRN";
		public const string _DESCRIPTION = "Sent by a configuration tool to put a specific node into learn mode.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Set node into learn mode";
		public const byte _NUMBER = 0x53; // 83
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}

		#endregion

		#region Constructors

		public NNLRN(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber}";

		#endregion
	}
	
	#endregion

	#region 0x54 NNULN Release node from learn mode

	/// <summary>
	/// Release node from learn mode
	/// Sent by a configuration tool to take node out of learn mode and revert to normal operation.
	/// </summary>
	[OpCode(
		Code = "NNULN", 
		Description = "Sent by a configuration tool to take node out of learn mode and revert to normal operation.",
		Group = "Config", 
		Name = "Release node from learn mode", 
		Number = 84, 
		Priority = 3)]
	public partial class NNULN : OpCodeData2 // 0x54
	{
		#region Fields

		public const string _CODE = "NNULN";
		public const string _DESCRIPTION = "Sent by a configuration tool to take node out of learn mode and revert to normal operation.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Release node from learn mode";
		public const byte _NUMBER = 0x54; // 84
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}

		#endregion

		#region Constructors

		public NNULN(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber}";

		#endregion
	}
	
	#endregion

	#region 0x55 NNCLR Clear all events from a node

	/// <summary>
	/// Clear all events from a node
	/// Sent by a configuration tool to clear all events from a specific node. Must be in learn mode first to safeguard against accidental erasure of all events.
	/// </summary>
	[OpCode(
		Code = "NNCLR", 
		Description = "Sent by a configuration tool to clear all events from a specific node. Must be in learn mode first to safeguard against accidental erasure of all events.",
		Group = "Config", 
		Name = "Clear all events from a node", 
		Number = 85, 
		Priority = 3)]
	public partial class NNCLR : OpCodeData2 // 0x55
	{
		#region Fields

		public const string _CODE = "NNCLR";
		public const string _DESCRIPTION = "Sent by a configuration tool to clear all events from a specific node. Must be in learn mode first to safeguard against accidental erasure of all events.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Clear all events from a node";
		public const byte _NUMBER = 0x55; // 85
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}

		#endregion

		#region Constructors

		public NNCLR(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber}";

		#endregion
	}
	
	#endregion

	#region 0x56 NNEVN Read number of events available in a node

	/// <summary>
	/// Read number of events available in a node
	/// Sent by a configuration tool to read the number of available event slots in a node. Response is EVLNF (0x70).
	/// </summary>
	[OpCode(
		Code = "NNEVN", 
		Description = "Sent by a configuration tool to read the number of available event slots in a node. Response is EVLNF (0x70).",
		Group = "Config", 
		Name = "Read number of events available in a node", 
		Number = 86, 
		Priority = 3)]
	public partial class NNEVN : OpCodeData2 // 0x56
	{
		#region Fields

		public const string _CODE = "NNEVN";
		public const string _DESCRIPTION = "Sent by a configuration tool to read the number of available event slots in a node. Response is EVLNF (0x70).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Read number of events available in a node";
		public const byte _NUMBER = 0x56; // 86
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}

		#endregion

		#region Constructors

		public NNEVN(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber}";

		#endregion
	}
	
	#endregion

	#region 0x57 NERD Read back all stored events in a node

	/// <summary>
	/// Read back all stored events in a node
	/// Sent by a configuration tool to read all the stored events in a node. Response is ENRSP (0xF2).
	/// </summary>
	[OpCode(
		Code = "NERD", 
		Description = "Sent by a configuration tool to read all the stored events in a node. Response is ENRSP (0xF2).",
		Group = "Config", 
		Name = "Read back all stored events in a node", 
		Number = 87, 
		Priority = 3)]
	public partial class NERD : OpCodeData2 // 0x57
	{
		#region Fields

		public const string _CODE = "NERD";
		public const string _DESCRIPTION = "Sent by a configuration tool to read all the stored events in a node. Response is ENRSP (0xF2).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Read back all stored events in a node";
		public const byte _NUMBER = 0x57; // 87
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}

		#endregion

		#region Constructors

		public NERD(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber}";

		#endregion
	}
	
	#endregion

	#region 0x58 RQEVN Request to read number of stored events

	/// <summary>
	/// Request to read number of stored events
	/// Sent by a configuration tool to read the number of stored events in a node. Response is NUMEV (0x74).
	/// </summary>
	[OpCode(
		Code = "RQEVN", 
		Description = "Sent by a configuration tool to read the number of stored events in a node. Response is NUMEV (0x74).",
		Group = "Config", 
		Name = "Request to read number of stored events", 
		Number = 88, 
		Priority = 3)]
	public partial class RQEVN : OpCodeData2 // 0x58
	{
		#region Fields

		public const string _CODE = "RQEVN";
		public const string _DESCRIPTION = "Sent by a configuration tool to read the number of stored events in a node. Response is NUMEV (0x74).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Request to read number of stored events";
		public const byte _NUMBER = 0x58; // 88
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}

		#endregion

		#region Constructors

		public RQEVN(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber}";

		#endregion
	}
	
	#endregion

	#region 0x59 WRACK Write acknowledge

	/// <summary>
	/// Write acknowledge
	/// Sent by a node to indicate the completion of a write to memory operation. All nodes must issue WRACK when a write operation to node variables
	/// </summary>
	[OpCode(
		Code = "WRACK", 
		Description = "Sent by a node to indicate the completion of a write to memory operation. All nodes must issue WRACK when a write operation to node variables",
		Group = "Config", 
		Name = "Write acknowledge", 
		Number = 89, 
		Priority = 3)]
	public partial class WRACK : OpCodeData2 // 0x59
	{
		#region Fields

		public const string _CODE = "WRACK";
		public const string _DESCRIPTION = "Sent by a node to indicate the completion of a write to memory operation. All nodes must issue WRACK when a write operation to node variables";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Write acknowledge";
		public const byte _NUMBER = 0x59; // 89
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}

		#endregion

		#region Constructors

		public WRACK(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber}";

		#endregion
	}
	
	#endregion

	#region 0x5A RQDAT Request node data event

	/// <summary>
	/// Request node data event
	/// Sent by one node to read the data event from another node.(eg: RFID data). Response is ARDAT (0xF7).
	/// </summary>
	[OpCode(
		Code = "RQDAT", 
		Description = "Sent by one node to read the data event from another node.(eg: RFID data). Response is ARDAT (0xF7).",
		Group = "Accessory", 
		Name = "Request node data event", 
		Number = 90, 
		Priority = 3)]
	public partial class RQDAT : OpCodeData2 // 0x5A
	{
		#region Fields

		public const string _CODE = "RQDAT";
		public const string _DESCRIPTION = "Sent by one node to read the data event from another node.(eg: RFID data). Response is ARDAT (0xF7).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Request node data event";
		public const byte _NUMBER = 0x5A; // 90
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}

		#endregion

		#region Constructors

		public RQDAT(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber}";

		#endregion
	}
	
	#endregion

	#region 0x5B RQDDS Request device data - short mode

	/// <summary>
	/// Request device data - short mode
	/// To request a ‘data set’ from a device using the short event method. where DN is the device number. Response is DDRS (0xFB).
	/// </summary>
	[OpCode(
		Code = "RQDDS", 
		Description = "To request a ‘data set’ from a device using the short event method. where DN is the device number. Response is DDRS (0xFB).",
		Group = "Accessory", 
		Name = "Request device data - short mode", 
		Number = 91, 
		Priority = 3)]
	public partial class RQDDS : OpCodeData2 // 0x5B
	{
		#region Fields

		public const string _CODE = "RQDDS";
		public const string _DESCRIPTION = "To request a ‘data set’ from a device using the short event method. where DN is the device number. Response is DDRS (0xFB).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Request device data - short mode";
		public const byte _NUMBER = 0x5B; // 91
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}

		#endregion

		#region Constructors

		public RQDDS(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.DeviceNumber}";

		#endregion
	}
	
	#endregion

	#region 0x5C BOOTM Put node into bootload mode

	/// <summary>
	/// Put node into bootload mode
	/// For SliM nodes with no NN then the NN of the command is must be zero. For SLiM nodes with an NN
	/// </summary>
	[OpCode(
		Code = "BOOTM", 
		Description = "For SliM nodes with no NN then the NN of the command is must be zero. For SLiM nodes with an NN",
		Group = "Config", 
		Name = "Put node into bootload mode", 
		Number = 92, 
		Priority = 3)]
	public partial class BOOTM : OpCodeData2 // 0x5C
	{
		#region Fields

		public const string _CODE = "BOOTM";
		public const string _DESCRIPTION = "For SliM nodes with no NN then the NN of the command is must be zero. For SLiM nodes with an NN";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Put node into bootload mode";
		public const byte _NUMBER = 0x5C; // 92
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}

		#endregion

		#region Constructors

		public BOOTM(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber}";

		#endregion
	}
	
	#endregion

	#region 0x5D ENUM Force a self enumeration cycle for use with CAN

	/// <summary>
	/// Force a self enumeration cycle for use with CAN
	/// For nodes in FLiM using CAN as transport. This OPC will force a self-enumeration cycle for the specified node. A new CAN_ID will be allocated if needed. Following the ENUM sequence
	/// </summary>
	[OpCode(
		Code = "ENUM", 
		Description = "For nodes in FLiM using CAN as transport. This OPC will force a self-enumeration cycle for the specified node. A new CAN_ID will be allocated if needed. Following the ENUM sequence",
		Group = "Config", 
		Name = "Force a self enumeration cycle for use with CAN", 
		Number = 93, 
		Priority = 3)]
	public partial class ENUM : OpCodeData2 // 0x5D
	{
		#region Fields

		public const string _CODE = "ENUM";
		public const string _DESCRIPTION = "For nodes in FLiM using CAN as transport. This OPC will force a self-enumeration cycle for the specified node. A new CAN_ID will be allocated if needed. Following the ENUM sequence";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Force a self enumeration cycle for use with CAN";
		public const byte _NUMBER = 0x5D; // 93
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}

		#endregion

		#region Constructors

		public ENUM(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber}";

		#endregion
	}
	
	#endregion

	#region 0x5F EXTC1 Extended opcode with 1 additional byte

	/// <summary>
	/// Extended opcode with 1 additional byte
	/// Used if the basic set of 32 OPCs is not enough. Allows an additional 256 OPCs.
	/// </summary>
	[OpCode(
		Code = "EXTC1", 
		Description = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 OPCs.",
		Group = "General", 
		Name = "Extended opcode with 1 additional byte", 
		Number = 95, 
		Priority = 3)]
	public partial class EXTC1 : OpCodeData2 // 0x5F
	{
		#region Fields

		public const string _CODE = "EXTC1";
		public const string _DESCRIPTION = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 OPCs.";
		public const OpCodeGroup _GROUP = OpCodeGroup.General;
		public const string _NAME = "Extended opcode with 1 additional byte";
		public const byte _NUMBER = 0x5F; // 95
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte ExtendedOpCode
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte Data1
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}

		#endregion

		#region Constructors

		public EXTC1(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.ExtendedOpCode:X2} {this.Data1:X2}";

		#endregion
	}
	
	#endregion

	#region 0x60 DFUN Set Engine functions

	/// <summary>
	/// Set Engine functions
	/// Sent by a CAB or equivalent to request an engine Fn state change.
	/// </summary>
	[OpCode(
		Code = "DFUN", 
		Description = "Sent by a CAB or equivalent to request an engine Fn state change.",
		Group = "DCC", 
		Name = "Set Engine functions", 
		Number = 96, 
		Priority = 2)]
	public partial class DFUN : OpCodeData3 // 0x60
	{
		#region Fields

		public const string _CODE = "DFUN";
		public const string _DESCRIPTION = "Sent by a CAB or equivalent to request an engine Fn state change.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Set Engine functions";
		public const byte _NUMBER = 0x60; // 96
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public FunctionRangeEnum FunctionRange
		{
			get => ConvertToEnum<FunctionRangeEnum>(2);
			set => ConvertFromEnum<FunctionRangeEnum>(2, value);
		}
		public byte Value
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}

		#endregion

		#region Constructors

		public DFUN(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session} {this.FunctionRange:F} {this.Value:X2}";

		#endregion
	}
	
	#endregion

	#region 0x61 GLOC Get engine session

	/// <summary>
	/// Get engine session
	/// Otherwise responds with (ERR): engine in use. (ERR:) stack full or (ERR) no session. The latter indicates that there is no current session to steal/share depending on the flag bits set in the request./r/nGLOC with all flag bits set to zero is exactly equivalent to RLOC
	/// </summary>
	[OpCode(
		Code = "GLOC", 
		Description = "Otherwise responds with (ERR): engine in use. (ERR:) stack full or (ERR) no session. The latter indicates that there is no current session to steal/share depending on the flag bits set in the request./r/nGLOC with all flag bits set to zero is exactly equivalent to RLOC",
		Group = "DCC", 
		Name = "Get engine session", 
		Number = 97, 
		Priority = 2)]
	public partial class GLOC : OpCodeData3 // 0x61
	{
		#region Fields

		public const string _CODE = "GLOC";
		public const string _DESCRIPTION = "Otherwise responds with (ERR): engine in use. (ERR:) stack full or (ERR) no session. The latter indicates that there is no current session to steal/share depending on the flag bits set in the request./r/nGLOC with all flag bits set to zero is exactly equivalent to RLOC";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Get engine session";
		public const byte _NUMBER = 0x61; // 97
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short Address
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public SessionFlagsEnum SessionFlags
		{
			get => ConvertToEnum<SessionFlagsEnum>(3);
			set => ConvertFromEnum<SessionFlagsEnum>(3, value);
		}

		#endregion

		#region Constructors

		public GLOC(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Address} {this.SessionFlags:F}";

		#endregion
	}
	
	#endregion

	#region 0x63 ERR Command Station Error report

	/// <summary>
	/// Command Station Error report
	/// Sent in response to an error situation by a command station.
	/// </summary>
	[OpCode(
		Code = "ERR", 
		Description = "Sent in response to an error situation by a command station.",
		Group = "DCC", 
		Name = "Command Station Error report", 
		Number = 99, 
		Priority = 2)]
	public partial class ERR : OpCodeData3 // 0x63
	{
		#region Fields

		public const string _CODE = "ERR";
		public const string _DESCRIPTION = "Sent in response to an error situation by a command station.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Command Station Error report";
		public const byte _NUMBER = 0x63; // 99
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Data1
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte Data2
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}
		public DccErrorCodeEnum DccErrorCode
		{
			get => ConvertToEnum<DccErrorCodeEnum>(3);
			set => ConvertFromEnum<DccErrorCodeEnum>(3, value);
		}

		#endregion

		#region Constructors

		public ERR(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Data1:X2} {this.Data2:X2} {this.DccErrorCode:F}";

		#endregion
	}
	
	#endregion

	#region 0x6F CMDERR Error messages from nodes during configuration

	/// <summary>
	/// Error messages from nodes during configuration
	/// Sent by node if there is an error when a configuration command is sent.
	/// </summary>
	[OpCode(
		Code = "CMDERR", 
		Description = "Sent by node if there is an error when a configuration command is sent.",
		Group = "Config", 
		Name = "Error messages from nodes during configuration", 
		Number = 111, 
		Priority = 3)]
	public partial class CMDERR : OpCodeData3 // 0x6F
	{
		#region Fields

		public const string _CODE = "CMDERR";
		public const string _DESCRIPTION = "Sent by node if there is an error when a configuration command is sent.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Error messages from nodes during configuration";
		public const byte _NUMBER = 0x6F; // 111
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public AccErrorCodeEnum AccErrorCode
		{
			get => ConvertToEnum<AccErrorCodeEnum>(3);
			set => ConvertFromEnum<AccErrorCodeEnum>(3, value);
		}

		#endregion

		#region Constructors

		public CMDERR(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.AccErrorCode:F}";

		#endregion
	}
	
	#endregion

	#region 0x70 EVNLF Event space left reply from node

	/// <summary>
	/// Event space left reply from node
	/// The number of available events left in that node.
	/// </summary>
	[OpCode(
		Code = "EVNLF", 
		Description = "The number of available events left in that node.",
		Group = "Config", 
		Name = "Event space left reply from node", 
		Number = 112, 
		Priority = 3)]
	public partial class EVNLF : OpCodeData3 // 0x70
	{
		#region Fields

		public const string _CODE = "EVNLF";
		public const string _DESCRIPTION = "The number of available events left in that node.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Event space left reply from node";
		public const byte _NUMBER = 0x70; // 112
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte Value
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}

		#endregion

		#region Constructors

		public EVNLF(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.Value:X2}";

		#endregion
	}
	
	#endregion

	#region 0x71 NVRD Request read of a node variable

	/// <summary>
	/// Request read of a node variable
	/// Response is NVANS (0x97).
	/// </summary>
	[OpCode(
		Code = "NVRD", 
		Description = "Response is NVANS (0x97).",
		Group = "Config", 
		Name = "Request read of a node variable", 
		Number = 113, 
		Priority = 3)]
	public partial class NVRD : OpCodeData3 // 0x71
	{
		#region Fields

		public const string _CODE = "NVRD";
		public const string _DESCRIPTION = "Response is NVANS (0x97).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Request read of a node variable";
		public const byte _NUMBER = 0x71; // 113
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte NVIndex
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}

		#endregion

		#region Constructors

		public NVRD(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.NVIndex}";

		#endregion
	}
	
	#endregion

	#region 0x72 NENRD Request read of stored events by event index

	/// <summary>
	/// Request read of stored events by event index
	/// Response is ENRSP (0xF2).
	/// </summary>
	[OpCode(
		Code = "NENRD", 
		Description = "Response is ENRSP (0xF2).",
		Group = "Config", 
		Name = "Request read of stored events by event index", 
		Number = 114, 
		Priority = 3)]
	public partial class NENRD : OpCodeData3 // 0x72
	{
		#region Fields

		public const string _CODE = "NENRD";
		public const string _DESCRIPTION = "Response is ENRSP (0xF2).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Request read of stored events by event index";
		public const byte _NUMBER = 0x72; // 114
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte ENIndex
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}

		#endregion

		#region Constructors

		public NENRD(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.ENIndex}";

		#endregion
	}
	
	#endregion

	#region 0x73 RQNPN Request read of a node parameter by index

	/// <summary>
	/// Request read of a node parameter by index
	/// Response is PARAN (0x9B).
	/// </summary>
	[OpCode(
		Code = "RQNPN", 
		Description = "Response is PARAN (0x9B).",
		Group = "Config", 
		Name = "Request read of a node parameter by index", 
		Number = 115, 
		Priority = 3)]
	public partial class RQNPN : OpCodeData3 // 0x73
	{
		#region Fields

		public const string _CODE = "RQNPN";
		public const string _DESCRIPTION = "Response is PARAN (0x9B).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Request read of a node parameter by index";
		public const byte _NUMBER = 0x73; // 115
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte ParamIndex
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}

		#endregion

		#region Constructors

		public RQNPN(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.ParamIndex}";

		#endregion
	}
	
	#endregion

	#region 0x74 NUMEV Number of events stored in node

	/// <summary>
	/// Number of events stored in node
	/// Response to request RQEVN (0x58).
	/// </summary>
	[OpCode(
		Code = "NUMEV", 
		Description = "Response to request RQEVN (0x58).",
		Group = "Config", 
		Name = "Number of events stored in node", 
		Number = 116, 
		Priority = 3)]
	public partial class NUMEV : OpCodeData3 // 0x74
	{
		#region Fields

		public const string _CODE = "NUMEV";
		public const string _DESCRIPTION = "Response to request RQEVN (0x58).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Number of events stored in node";
		public const byte _NUMBER = 0x74; // 116
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte Value
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}

		#endregion

		#region Constructors

		public NUMEV(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.Value:X2}";

		#endregion
	}
	
	#endregion

	#region 0x75 CANID Set a CAN_ID in existing FLiM node

	/// <summary>
	/// Set a CAN_ID in existing FLiM node
	/// Used to force a specified CAN_ID into a node. Value range is from 1 to 0x63 (99 decimal) This OPC must be used with care as duplicate CAN_IDs are not allowed.. Values outside the permitted range will produce an error 7 message.and the CAN_ID will not change.
	/// </summary>
	[OpCode(
		Code = "CANID", 
		Description = "Used to force a specified CAN_ID into a node. Value range is from 1 to 0x63 (99 decimal) This OPC must be used with care as duplicate CAN_IDs are not allowed.. Values outside the permitted range will produce an error 7 message.and the CAN_ID will not change.",
		Group = "Config", 
		Name = "Set a CAN_ID in existing FLiM node", 
		Number = 117, 
		Priority = 3)]
	public partial class CANID : OpCodeData3 // 0x75
	{
		#region Fields

		public const string _CODE = "CANID";
		public const string _DESCRIPTION = "Used to force a specified CAN_ID into a node. Value range is from 1 to 0x63 (99 decimal) This OPC must be used with care as duplicate CAN_IDs are not allowed.. Values outside the permitted range will produce an error 7 message.and the CAN_ID will not change.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Set a CAN_ID in existing FLiM node";
		public const byte _NUMBER = 0x75; // 117
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte CAN_ID
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}

		#endregion

		#region Constructors

		public CANID(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.CAN_ID}";

		#endregion
	}
	
	#endregion

	#region 0x7F EXTC2 Extended opcode with 2 additional bytes

	/// <summary>
	/// Extended opcode with 2 additional bytes
	/// Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.
	/// </summary>
	[OpCode(
		Code = "EXTC2", 
		Description = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.",
		Group = "General", 
		Name = "Extended opcode with 2 additional bytes", 
		Number = 127, 
		Priority = 3)]
	public partial class EXTC2 : OpCodeData3 // 0x7F
	{
		#region Fields

		public const string _CODE = "EXTC2";
		public const string _DESCRIPTION = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.";
		public const OpCodeGroup _GROUP = OpCodeGroup.General;
		public const string _NAME = "Extended opcode with 2 additional bytes";
		public const byte _NUMBER = 0x7F; // 127
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte ExtendedOpCode
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte Data1
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}
		public byte Data2
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}

		#endregion

		#region Constructors

		public EXTC2(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.ExtendedOpCode:X2} {this.Data1:X2} {this.Data2:X2}";

		#endregion
	}
	
	#endregion

	#region 0x80 RDCC3 Request 3 byte DCC Packet

	/// <summary>
	/// Request 3 byte DCC Packet
	/// Allows a CAB or equivalent to request a 3 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis. Note: a 3 byte DCC packet is the minimum allowed.
	/// </summary>
	[OpCode(
		Code = "RDCC3", 
		Description = "Allows a CAB or equivalent to request a 3 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis. Note: a 3 byte DCC packet is the minimum allowed.",
		Group = "DCC", 
		Name = "Request 3 byte DCC Packet", 
		Number = 128, 
		Priority = 2)]
	public partial class RDCC3 : OpCodeData4 // 0x80
	{
		#region Fields

		public const string _CODE = "RDCC3";
		public const string _DESCRIPTION = "Allows a CAB or equivalent to request a 3 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis. Note: a 3 byte DCC packet is the minimum allowed.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Request 3 byte DCC Packet";
		public const byte _NUMBER = 0x80; // 128
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Repetitions
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte Data1
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}
		public byte Data2
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Data3
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}

		#endregion

		#region Constructors

		public RDCC3(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Repetitions} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2}";

		#endregion
	}
	
	#endregion

	#region 0x82 WCVO Write CV (byte) in OPS mode

	/// <summary>
	/// Write CV (byte) in OPS mode
	/// Sent to the command station to write a DCC CV byte in OPS mode to specific loco.(on the main).
	/// </summary>
	[OpCode(
		Code = "WCVO", 
		Description = "Sent to the command station to write a DCC CV byte in OPS mode to specific loco.(on the main).",
		Group = "DCC", 
		Name = "Write CV (byte) in OPS mode", 
		Number = 130, 
		Priority = 2)]
	public partial class WCVO : OpCodeData4 // 0x82
	{
		#region Fields

		public const string _CODE = "WCVO";
		public const string _DESCRIPTION = "Sent to the command station to write a DCC CV byte in OPS mode to specific loco.(on the main).";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Write CV (byte) in OPS mode";
		public const byte _NUMBER = 0x82; // 130
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public short CV
		{
			get => ConvertToShort(new int[] { 2,3 });
			set => ConvertFromShort(new int[] { 2,3 }, value);
		}
		public byte Value
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}

		#endregion

		#region Constructors

		public WCVO(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session} {this.CV} {this.Value:X2}";

		#endregion
	}
	
	#endregion

	#region 0x83 WCVB Write CB (bit) in OPS mode

	/// <summary>
	/// Write CB (bit) in OPS mode
	/// Sent to the command station to write a DCC CV in OPS mode to specific loco.(on the main).
	/// </summary>
	[OpCode(
		Code = "WCVB", 
		Description = "Sent to the command station to write a DCC CV in OPS mode to specific loco.(on the main).",
		Group = "DCC", 
		Name = "Write CB (bit) in OPS mode", 
		Number = 131, 
		Priority = 2)]
	public partial class WCVB : OpCodeData4 // 0x83
	{
		#region Fields

		public const string _CODE = "WCVB";
		public const string _DESCRIPTION = "Sent to the command station to write a DCC CV in OPS mode to specific loco.(on the main).";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Write CB (bit) in OPS mode";
		public const byte _NUMBER = 0x83; // 131
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public short CV
		{
			get => ConvertToShort(new int[] { 2,3 });
			set => ConvertFromShort(new int[] { 2,3 }, value);
		}
		public byte Value
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}

		#endregion

		#region Constructors

		public WCVB(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session} {this.CV} {this.Value:X2}";

		#endregion
	}
	
	#endregion

	#region 0x84 QCVS Read CV

	/// <summary>
	/// Read CV
	/// This command is used exclusively with service mode. Sent by the cab to the command station in order to read a CV value. The command station shall respond with a PCVS message containing the value read
	/// </summary>
	[OpCode(
		Code = "QCVS", 
		Description = "This command is used exclusively with service mode. Sent by the cab to the command station in order to read a CV value. The command station shall respond with a PCVS message containing the value read",
		Group = "DCC", 
		Name = "Read CV", 
		Number = 132, 
		Priority = 2)]
	public partial class QCVS : OpCodeData4 // 0x84
	{
		#region Fields

		public const string _CODE = "QCVS";
		public const string _DESCRIPTION = "This command is used exclusively with service mode. Sent by the cab to the command station in order to read a CV value. The command station shall respond with a PCVS message containing the value read";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Read CV";
		public const byte _NUMBER = 0x84; // 132
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public short CV
		{
			get => ConvertToShort(new int[] { 2,3 });
			set => ConvertFromShort(new int[] { 2,3 }, value);
		}
		public byte Mode
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}

		#endregion

		#region Constructors

		public QCVS(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session} {this.CV} {this.Mode}";

		#endregion
	}
	
	#endregion

	#region 0x85 PCVS Report CV

	/// <summary>
	/// Report CV
	/// This command is used exclusively with service mode. Sent by the command station to report a read CV.
	/// </summary>
	[OpCode(
		Code = "PCVS", 
		Description = "This command is used exclusively with service mode. Sent by the command station to report a read CV.",
		Group = "DCC", 
		Name = "Report CV", 
		Number = 133, 
		Priority = 2)]
	public partial class PCVS : OpCodeData4 // 0x85
	{
		#region Fields

		public const string _CODE = "PCVS";
		public const string _DESCRIPTION = "This command is used exclusively with service mode. Sent by the command station to report a read CV.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Report CV";
		public const byte _NUMBER = 0x85; // 133
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public short CV
		{
			get => ConvertToShort(new int[] { 2,3 });
			set => ConvertFromShort(new int[] { 2,3 }, value);
		}
		public byte Value
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}

		#endregion

		#region Constructors

		public PCVS(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session} {this.CV} {this.Value:X2}";

		#endregion
	}
	
	#endregion

	#region 0x90 ACON Accessory On

	/// <summary>
	/// Accessory On
	/// Indicates an ‘ON’ event using the full event number of 4 bytes. (long event).
	/// </summary>
	[OpCode(
		Code = "ACON", 
		Description = "Indicates an ‘ON’ event using the full event number of 4 bytes. (long event).",
		Group = "Accessory", 
		Name = "Accessory On", 
		Number = 144, 
		Priority = 3)]
	public partial class ACON : OpCodeData4 // 0x90
	{
		#region Fields

		public const string _CODE = "ACON";
		public const string _DESCRIPTION = "Indicates an ‘ON’ event using the full event number of 4 bytes. (long event).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory On";
		public const byte _NUMBER = 0x90; // 144
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}

		#endregion

		#region Constructors

		public ACON(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber}";

		#endregion
	}
	
	#endregion

	#region 0x91 ACOF Accessory Off

	/// <summary>
	/// Accessory Off
	/// Indicates an ‘OFF’ event using the full event number of 4 bytes. (long event).
	/// </summary>
	[OpCode(
		Code = "ACOF", 
		Description = "Indicates an ‘OFF’ event using the full event number of 4 bytes. (long event).",
		Group = "Accessory", 
		Name = "Accessory Off", 
		Number = 145, 
		Priority = 3)]
	public partial class ACOF : OpCodeData4 // 0x91
	{
		#region Fields

		public const string _CODE = "ACOF";
		public const string _DESCRIPTION = "Indicates an ‘OFF’ event using the full event number of 4 bytes. (long event).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Off";
		public const byte _NUMBER = 0x91; // 145
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}

		#endregion

		#region Constructors

		public ACOF(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber}";

		#endregion
	}
	
	#endregion

	#region 0x92 AREQ Accessory Request Event

	/// <summary>
	/// Accessory Request Event
	/// Indicates a ‘request’ event using the full event number of 4 bytes. (long event)./r/nA request event is used to elicit a status response from a producer when it is required to know the ‘state’ of the producer without producing an ON or OFF event and to trigger an event from a ‘combi’ node.
	/// </summary>
	[OpCode(
		Code = "AREQ", 
		Description = "Indicates a ‘request’ event using the full event number of 4 bytes. (long event)./r/nA request event is used to elicit a status response from a producer when it is required to know the ‘state’ of the producer without producing an ON or OFF event and to trigger an event from a ‘combi’ node.",
		Group = "Accessory", 
		Name = "Accessory Request Event", 
		Number = 146, 
		Priority = 3)]
	public partial class AREQ : OpCodeData4 // 0x92
	{
		#region Fields

		public const string _CODE = "AREQ";
		public const string _DESCRIPTION = "Indicates a ‘request’ event using the full event number of 4 bytes. (long event)./r/nA request event is used to elicit a status response from a producer when it is required to know the ‘state’ of the producer without producing an ON or OFF event and to trigger an event from a ‘combi’ node.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Request Event";
		public const byte _NUMBER = 0x92; // 146
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}

		#endregion

		#region Constructors

		public AREQ(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber}";

		#endregion
	}
	
	#endregion

	#region 0x93 ARON Accessory Response Event

	/// <summary>
	/// Accessory Response Event
	/// Indicates an ‘ON’ response event. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.
	/// </summary>
	[OpCode(
		Code = "ARON", 
		Description = "Indicates an ‘ON’ response event. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.",
		Group = "Accessory", 
		Name = "Accessory Response Event", 
		Number = 147, 
		Priority = 3)]
	public partial class ARON : OpCodeData4 // 0x93
	{
		#region Fields

		public const string _CODE = "ARON";
		public const string _DESCRIPTION = "Indicates an ‘ON’ response event. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Response Event";
		public const byte _NUMBER = 0x93; // 147
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}

		#endregion

		#region Constructors

		public ARON(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber}";

		#endregion
	}
	
	#endregion

	#region 0x94 AROF Accessory Response Event

	/// <summary>
	/// Accessory Response Event
	/// Indicates an ‘OFF’ response event. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.
	/// </summary>
	[OpCode(
		Code = "AROF", 
		Description = "Indicates an ‘OFF’ response event. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.",
		Group = "Accessory", 
		Name = "Accessory Response Event", 
		Number = 148, 
		Priority = 3)]
	public partial class AROF : OpCodeData4 // 0x94
	{
		#region Fields

		public const string _CODE = "AROF";
		public const string _DESCRIPTION = "Indicates an ‘OFF’ response event. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Response Event";
		public const byte _NUMBER = 0x94; // 148
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}

		#endregion

		#region Constructors

		public AROF(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber}";

		#endregion
	}
	
	#endregion

	#region 0x95 EVULN Unlearn an event in learn mode

	/// <summary>
	/// Unlearn an event in learn mode
	/// Sent by a configuration tool to remove an event from a node.
	/// </summary>
	[OpCode(
		Code = "EVULN", 
		Description = "Sent by a configuration tool to remove an event from a node.",
		Group = "Config", 
		Name = "Unlearn an event in learn mode", 
		Number = 149, 
		Priority = 3)]
	public partial class EVULN : OpCodeData4 // 0x95
	{
		#region Fields

		public const string _CODE = "EVULN";
		public const string _DESCRIPTION = "Sent by a configuration tool to remove an event from a node.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Unlearn an event in learn mode";
		public const byte _NUMBER = 0x95; // 149
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}

		#endregion

		#region Constructors

		public EVULN(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber}";

		#endregion
	}
	
	#endregion

	#region 0x96 NVSET Set a node variable

	/// <summary>
	/// Set a node variable
	/// Sent by a configuration tool to set a node variable.
	/// </summary>
	[OpCode(
		Code = "NVSET", 
		Description = "Sent by a configuration tool to set a node variable.",
		Group = "Config", 
		Name = "Set a node variable", 
		Number = 150, 
		Priority = 3)]
	public partial class NVSET : OpCodeData4 // 0x96
	{
		#region Fields

		public const string _CODE = "NVSET";
		public const string _DESCRIPTION = "Sent by a configuration tool to set a node variable.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Set a node variable";
		public const byte _NUMBER = 0x96; // 150
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte NVIndex
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Value
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}

		#endregion

		#region Constructors

		public NVSET(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.NVIndex} {this.Value:X2}";

		#endregion
	}
	
	#endregion

	#region 0x97 NVANS Response to a request for a node variable value

	/// <summary>
	/// Response to a request for a node variable value
	/// Sent by node in response to request NVRD (0x71).
	/// </summary>
	[OpCode(
		Code = "NVANS", 
		Description = "Sent by node in response to request NVRD (0x71).",
		Group = "Config", 
		Name = "Response to a request for a node variable value", 
		Number = 151, 
		Priority = 3)]
	public partial class NVANS : OpCodeData4 // 0x97
	{
		#region Fields

		public const string _CODE = "NVANS";
		public const string _DESCRIPTION = "Sent by node in response to request NVRD (0x71).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Response to a request for a node variable value";
		public const byte _NUMBER = 0x97; // 151
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte NVIndex
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Value
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}

		#endregion

		#region Constructors

		public NVANS(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.NVIndex} {this.Value:X2}";

		#endregion
	}
	
	#endregion

	#region 0x98 ASON Accessory Short On

	/// <summary>
	/// Accessory Short On
	/// Indicates an ‘ON’ event using the short event number of 2 LS bytes.
	/// </summary>
	[OpCode(
		Code = "ASON", 
		Description = "Indicates an ‘ON’ event using the short event number of 2 LS bytes.",
		Group = "Accessory", 
		Name = "Accessory Short On", 
		Number = 152, 
		Priority = 3)]
	public partial class ASON : OpCodeData4 // 0x98
	{
		#region Fields

		public const string _CODE = "ASON";
		public const string _DESCRIPTION = "Indicates an ‘ON’ event using the short event number of 2 LS bytes.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short On";
		public const byte _NUMBER = 0x98; // 152
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}

		#endregion

		#region Constructors

		public ASON(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber}";

		#endregion
	}
	
	#endregion

	#region 0x99 ASOF Accessory Short Off

	/// <summary>
	/// Accessory Short Off
	/// Indicates an ‘OFF’ event using the short event number of 2 LS bytes.
	/// </summary>
	[OpCode(
		Code = "ASOF", 
		Description = "Indicates an ‘OFF’ event using the short event number of 2 LS bytes.",
		Group = "Accessory", 
		Name = "Accessory Short Off", 
		Number = 153, 
		Priority = 3)]
	public partial class ASOF : OpCodeData4 // 0x99
	{
		#region Fields

		public const string _CODE = "ASOF";
		public const string _DESCRIPTION = "Indicates an ‘OFF’ event using the short event number of 2 LS bytes.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short Off";
		public const byte _NUMBER = 0x99; // 153
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}

		#endregion

		#region Constructors

		public ASOF(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber}";

		#endregion
	}
	
	#endregion

	#region 0x9A ASRQ Accessory Short Request Event

	/// <summary>
	/// Accessory Short Request Event
	/// Indicates a ‘request’ event using the short event number of 2 LS bytes. A request event is used to elicit a response from a producer ‘device’ when it is required to know the ‘state’ of the device without producing an ON or OFF event and to trigger an event from a “combi” node.
	/// </summary>
	[OpCode(
		Code = "ASRQ", 
		Description = "Indicates a ‘request’ event using the short event number of 2 LS bytes. A request event is used to elicit a response from a producer ‘device’ when it is required to know the ‘state’ of the device without producing an ON or OFF event and to trigger an event from a “combi” node.",
		Group = "Accessory", 
		Name = "Accessory Short Request Event", 
		Number = 154, 
		Priority = 3)]
	public partial class ASRQ : OpCodeData4 // 0x9A
	{
		#region Fields

		public const string _CODE = "ASRQ";
		public const string _DESCRIPTION = "Indicates a ‘request’ event using the short event number of 2 LS bytes. A request event is used to elicit a response from a producer ‘device’ when it is required to know the ‘state’ of the device without producing an ON or OFF event and to trigger an event from a “combi” node.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short Request Event";
		public const byte _NUMBER = 0x9A; // 154
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}

		#endregion

		#region Constructors

		public ASRQ(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber}";

		#endregion
	}
	
	#endregion

	#region 0x9B PARAN Response to request for individual node parameter

	/// <summary>
	/// Response to request for individual node parameter
	/// The response to a request for an individual node parameter.
	/// </summary>
	[OpCode(
		Code = "PARAN", 
		Description = "The response to a request for an individual node parameter.",
		Group = "Config", 
		Name = "Response to request for individual node parameter", 
		Number = 155, 
		Priority = 3)]
	public partial class PARAN : OpCodeData4 // 0x9B
	{
		#region Fields

		public const string _CODE = "PARAN";
		public const string _DESCRIPTION = "The response to a request for an individual node parameter.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Response to request for individual node parameter";
		public const byte _NUMBER = 0x9B; // 155
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte ParamIndex
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Value
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}

		#endregion

		#region Constructors

		public PARAN(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.ParamIndex} {this.Value:X2}";

		#endregion
	}
	
	#endregion

	#region 0x9C REVAL Request for read of an event variable

	/// <summary>
	/// Request for read of an event variable
	/// This request differs from REQEV (0xB2) as it doesn’t need to be in learn mode but does require the knowledge of the event index to which the EV request is directed. Response is NEVAL (0xB5).
	/// </summary>
	[OpCode(
		Code = "REVAL", 
		Description = "This request differs from REQEV (0xB2) as it doesn’t need to be in learn mode but does require the knowledge of the event index to which the EV request is directed. Response is NEVAL (0xB5).",
		Group = "Config", 
		Name = "Request for read of an event variable", 
		Number = 156, 
		Priority = 3)]
	public partial class REVAL : OpCodeData4 // 0x9C
	{
		#region Fields

		public const string _CODE = "REVAL";
		public const string _DESCRIPTION = "This request differs from REQEV (0xB2) as it doesn’t need to be in learn mode but does require the knowledge of the event index to which the EV request is directed. Response is NEVAL (0xB5).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Request for read of an event variable";
		public const byte _NUMBER = 0x9C; // 156
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte ENIndex
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte EVIndex
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}

		#endregion

		#region Constructors

		public REVAL(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.ENIndex} {this.EVIndex}";

		#endregion
	}
	
	#endregion

	#region 0x9D ARSON Accessory Short Response Event On

	/// <summary>
	/// Accessory Short Response Event On
	/// Indicates an ‘ON’ response event. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.
	/// </summary>
	[OpCode(
		Code = "ARSON", 
		Description = "Indicates an ‘ON’ response event. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.",
		Group = "Accessory", 
		Name = "Accessory Short Response Event On", 
		Number = 157, 
		Priority = 3)]
	public partial class ARSON : OpCodeData4 // 0x9D
	{
		#region Fields

		public const string _CODE = "ARSON";
		public const string _DESCRIPTION = "Indicates an ‘ON’ response event. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short Response Event On";
		public const byte _NUMBER = 0x9D; // 157
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}

		#endregion

		#region Constructors

		public ARSON(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber}";

		#endregion
	}
	
	#endregion

	#region 0x9E ARSOF Accessory Short Response Event Off

	/// <summary>
	/// Accessory Short Response Event Off
	/// Indicates an ‘OFF’ response event. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.
	/// </summary>
	[OpCode(
		Code = "ARSOF", 
		Description = "Indicates an ‘OFF’ response event. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.",
		Group = "Accessory", 
		Name = "Accessory Short Response Event Off", 
		Number = 158, 
		Priority = 3)]
	public partial class ARSOF : OpCodeData4 // 0x9E
	{
		#region Fields

		public const string _CODE = "ARSOF";
		public const string _DESCRIPTION = "Indicates an ‘OFF’ response event. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short Response Event Off";
		public const byte _NUMBER = 0x9E; // 158
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}

		#endregion

		#region Constructors

		public ARSOF(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber}";

		#endregion
	}
	
	#endregion

	#region 0x9F EXTC3 Extended opcode with 3 additional bytes

	/// <summary>
	/// Extended opcode with 3 additional bytes
	/// Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.
	/// </summary>
	[OpCode(
		Code = "EXTC3", 
		Description = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.",
		Group = "General", 
		Name = "Extended opcode with 3 additional bytes", 
		Number = 159, 
		Priority = 3)]
	public partial class EXTC3 : OpCodeData4 // 0x9F
	{
		#region Fields

		public const string _CODE = "EXTC3";
		public const string _DESCRIPTION = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.";
		public const OpCodeGroup _GROUP = OpCodeGroup.General;
		public const string _NAME = "Extended opcode with 3 additional bytes";
		public const byte _NUMBER = 0x9F; // 159
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte ExtendedOpCode
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte Data1
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}
		public byte Data2
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Data3
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}

		#endregion

		#region Constructors

		public EXTC3(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.ExtendedOpCode:X2} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2}";

		#endregion
	}
	
	#endregion

	#region 0xA0 RDCC4 Request 4 byte DCC Packet

	/// <summary>
	/// Request 4 byte DCC Packet
	/// Allows a CAB or equivalent to request a 4 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.
	/// </summary>
	[OpCode(
		Code = "RDCC4", 
		Description = "Allows a CAB or equivalent to request a 4 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.",
		Group = "DCC", 
		Name = "Request 4 byte DCC Packet", 
		Number = 160, 
		Priority = 2)]
	public partial class RDCC4 : OpCodeData5 // 0xA0
	{
		#region Fields

		public const string _CODE = "RDCC4";
		public const string _DESCRIPTION = "Allows a CAB or equivalent to request a 4 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Request 4 byte DCC Packet";
		public const byte _NUMBER = 0xA0; // 160
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Repetitions
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte Data1
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}
		public byte Data2
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Data3
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}
		public byte Data4
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}

		#endregion

		#region Constructors

		public RDCC4(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Repetitions} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2} {this.Data4:X2}";

		#endregion
	}
	
	#endregion

	#region 0xA2 WCVS Write CV in Service mode

	/// <summary>
	/// Write CV in Service mode
	/// Sent to the command station to write a DCC CV in service mode.
	/// </summary>
	[OpCode(
		Code = "WCVS", 
		Description = "Sent to the command station to write a DCC CV in service mode.",
		Group = "DCC", 
		Name = "Write CV in Service mode", 
		Number = 162, 
		Priority = 2)]
	public partial class WCVS : OpCodeData5 // 0xA2
	{
		#region Fields

		public const string _CODE = "WCVS";
		public const string _DESCRIPTION = "Sent to the command station to write a DCC CV in service mode.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Write CV in Service mode";
		public const byte _NUMBER = 0xA2; // 162
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public short CV
		{
			get => ConvertToShort(new int[] { 2,3 });
			set => ConvertFromShort(new int[] { 2,3 }, value);
		}
		public ServiceModeEnum ServiceMode
		{
			get => ConvertToEnum<ServiceModeEnum>(4);
			set => ConvertFromEnum<ServiceModeEnum>(4, value);
		}
		public byte Value
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}

		#endregion

		#region Constructors

		public WCVS(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session} {this.CV} {this.ServiceMode:F} {this.Value:X2}";

		#endregion
	}
	
	#endregion

	#region 0xB0 ACON1 Accessory On

	/// <summary>
	/// Accessory On
	/// Indicates an ‘ON’ event using the full event number of 4 bytes with one additional data byte.
	/// </summary>
	[OpCode(
		Code = "ACON1", 
		Description = "Indicates an ‘ON’ event using the full event number of 4 bytes with one additional data byte.",
		Group = "Accessory", 
		Name = "Accessory On", 
		Number = 176, 
		Priority = 3)]
	public partial class ACON1 : OpCodeData5 // 0xB0
	{
		#region Fields

		public const string _CODE = "ACON1";
		public const string _DESCRIPTION = "Indicates an ‘ON’ event using the full event number of 4 bytes with one additional data byte.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory On";
		public const byte _NUMBER = 0xB0; // 176
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}

		#endregion

		#region Constructors

		public ACON1(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber} {this.Data1:X2}";

		#endregion
	}
	
	#endregion

	#region 0xB1 ACOF1 Accessory Off

	/// <summary>
	/// Accessory Off
	/// Indicates an ‘OFF’ event using the full event number of 4 bytes with one additional data byte.
	/// </summary>
	[OpCode(
		Code = "ACOF1", 
		Description = "Indicates an ‘OFF’ event using the full event number of 4 bytes with one additional data byte.",
		Group = "Accessory", 
		Name = "Accessory Off", 
		Number = 177, 
		Priority = 3)]
	public partial class ACOF1 : OpCodeData5 // 0xB1
	{
		#region Fields

		public const string _CODE = "ACOF1";
		public const string _DESCRIPTION = "Indicates an ‘OFF’ event using the full event number of 4 bytes with one additional data byte.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Off";
		public const byte _NUMBER = 0xB1; // 177
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}

		#endregion

		#region Constructors

		public ACOF1(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber} {this.Data1:X2}";

		#endregion
	}
	
	#endregion

	#region 0xB2 REQEV Read event variable in learn mode

	/// <summary>
	/// Read event variable in learn mode
	/// Allows a configuration tool to read stored event variables from a node. Reply is EVANS (0xD3).
	/// </summary>
	[OpCode(
		Code = "REQEV", 
		Description = "Allows a configuration tool to read stored event variables from a node. Reply is EVANS (0xD3).",
		Group = "Config", 
		Name = "Read event variable in learn mode", 
		Number = 178, 
		Priority = 3)]
	public partial class REQEV : OpCodeData5 // 0xB2
	{
		#region Fields

		public const string _CODE = "REQEV";
		public const string _DESCRIPTION = "Allows a configuration tool to read stored event variables from a node. Reply is EVANS (0xD3).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Read event variable in learn mode";
		public const byte _NUMBER = 0xB2; // 178
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte EVIndex
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}

		#endregion

		#region Constructors

		public REQEV(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber} {this.EVIndex}";

		#endregion
	}
	
	#endregion

	#region 0xB3 ARON1 Accessory Response Event

	/// <summary>
	/// Accessory Response Event
	/// Indicates an ‘ON’ response event with one additional data byte. A response event is a reply to a status request (AREQ) without producing an ON or OFF event.
	/// </summary>
	[OpCode(
		Code = "ARON1", 
		Description = "Indicates an ‘ON’ response event with one additional data byte. A response event is a reply to a status request (AREQ) without producing an ON or OFF event.",
		Group = "Accessory", 
		Name = "Accessory Response Event", 
		Number = 179, 
		Priority = 3)]
	public partial class ARON1 : OpCodeData5 // 0xB3
	{
		#region Fields

		public const string _CODE = "ARON1";
		public const string _DESCRIPTION = "Indicates an ‘ON’ response event with one additional data byte. A response event is a reply to a status request (AREQ) without producing an ON or OFF event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Response Event";
		public const byte _NUMBER = 0xB3; // 179
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}

		#endregion

		#region Constructors

		public ARON1(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber} {this.Data1:X2}";

		#endregion
	}
	
	#endregion

	#region 0xB4 AROF1 Accessory Response Event

	/// <summary>
	/// Accessory Response Event
	/// Indicates an ‘OFF’ response event with one additional data byte. A response event is a reply to a status request (AREQ) without producing an ON or OFF event.
	/// </summary>
	[OpCode(
		Code = "AROF1", 
		Description = "Indicates an ‘OFF’ response event with one additional data byte. A response event is a reply to a status request (AREQ) without producing an ON or OFF event.",
		Group = "Accessory", 
		Name = "Accessory Response Event", 
		Number = 180, 
		Priority = 3)]
	public partial class AROF1 : OpCodeData5 // 0xB4
	{
		#region Fields

		public const string _CODE = "AROF1";
		public const string _DESCRIPTION = "Indicates an ‘OFF’ response event with one additional data byte. A response event is a reply to a status request (AREQ) without producing an ON or OFF event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Response Event";
		public const byte _NUMBER = 0xB4; // 180
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}

		#endregion

		#region Constructors

		public AROF1(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber} {this.Data1:X2}";

		#endregion
	}
	
	#endregion

	#region 0xB5 NEVAL Response to request for read of EV value

	/// <summary>
	/// Response to request for read of EV value
	/// This is response to REVAL (0x9C).
	/// </summary>
	[OpCode(
		Code = "NEVAL", 
		Description = "This is response to REVAL (0x9C).",
		Group = "Config", 
		Name = "Response to request for read of EV value", 
		Number = 181, 
		Priority = 3)]
	public partial class NEVAL : OpCodeData5 // 0xB5
	{
		#region Fields

		public const string _CODE = "NEVAL";
		public const string _DESCRIPTION = "This is response to REVAL (0x9C).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Response to request for read of EV value";
		public const byte _NUMBER = 0xB5; // 181
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte EVIndex
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}
		public byte ENIndex
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Value
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}

		#endregion

		#region Constructors

		public NEVAL(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.ENIndex} {this.EVIndex} {this.Value:X2}";

		#endregion
	}
	
	#endregion

	#region 0xB6 PNN Response to Query Node

	/// <summary>
	/// Response to Query Node
	/// Every node should send this message in response to a QNN (0x0D) message.
	/// </summary>
	[OpCode(
		Code = "PNN", 
		Description = "Every node should send this message in response to a QNN (0x0D) message.",
		Group = "General", 
		Name = "Response to Query Node", 
		Number = 182, 
		Priority = 3)]
	public partial class PNN : OpCodeData5 // 0xB6
	{
		#region Fields

		public const string _CODE = "PNN";
		public const string _DESCRIPTION = "Every node should send this message in response to a QNN (0x0D) message.";
		public const OpCodeGroup _GROUP = OpCodeGroup.General;
		public const string _NAME = "Response to Query Node";
		public const byte _NUMBER = 0xB6; // 182
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte ManufId
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte ModuleId
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}
		public NodeFlagsEnum NodeFlags
		{
			get => ConvertToEnum<NodeFlagsEnum>(5);
			set => ConvertFromEnum<NodeFlagsEnum>(5, value);
		}

		#endregion

		#region Constructors

		public PNN(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.ManufId} {this.ModuleId} {this.NodeFlags:F}";

		#endregion
	}
	
	#endregion

	#region 0xB8 ASON1 Accessory Short On

	/// <summary>
	/// Accessory Short On
	/// Indicates an ‘ON’ event using the short event number of 2 LS bytes with one added data byte.
	/// </summary>
	[OpCode(
		Code = "ASON1", 
		Description = "Indicates an ‘ON’ event using the short event number of 2 LS bytes with one added data byte.",
		Group = "Accessory", 
		Name = "Accessory Short On", 
		Number = 184, 
		Priority = 3)]
	public partial class ASON1 : OpCodeData5 // 0xB8
	{
		#region Fields

		public const string _CODE = "ASON1";
		public const string _DESCRIPTION = "Indicates an ‘ON’ event using the short event number of 2 LS bytes with one added data byte.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short On";
		public const byte _NUMBER = 0xB8; // 184
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}

		#endregion

		#region Constructors

		public ASON1(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber} {this.Data1:X2}";

		#endregion
	}
	
	#endregion

	#region 0xB9 ASOF1 Accessory Short Off

	/// <summary>
	/// Accessory Short Off
	/// Indicates an ‘OFF’ event using the short event number of 2 LS bytes with one added data byte.
	/// </summary>
	[OpCode(
		Code = "ASOF1", 
		Description = "Indicates an ‘OFF’ event using the short event number of 2 LS bytes with one added data byte.",
		Group = "Accessory", 
		Name = "Accessory Short Off", 
		Number = 185, 
		Priority = 3)]
	public partial class ASOF1 : OpCodeData5 // 0xB9
	{
		#region Fields

		public const string _CODE = "ASOF1";
		public const string _DESCRIPTION = "Indicates an ‘OFF’ event using the short event number of 2 LS bytes with one added data byte.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short Off";
		public const byte _NUMBER = 0xB9; // 185
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}

		#endregion

		#region Constructors

		public ASOF1(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber} {this.Data1:X2}";

		#endregion
	}
	
	#endregion

	#region 0xBD ARSON1 Accessory Short Response Event

	/// <summary>
	/// Accessory Short Response Event
	/// Indicates an ‘ON’ response event with one added data byte. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.
	/// </summary>
	[OpCode(
		Code = "ARSON1", 
		Description = "Indicates an ‘ON’ response event with one added data byte. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.",
		Group = "Accessory", 
		Name = "Accessory Short Response Event", 
		Number = 189, 
		Priority = 3)]
	public partial class ARSON1 : OpCodeData5 // 0xBD
	{
		#region Fields

		public const string _CODE = "ARSON1";
		public const string _DESCRIPTION = "Indicates an ‘ON’ response event with one added data byte. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short Response Event";
		public const byte _NUMBER = 0xBD; // 189
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}

		#endregion

		#region Constructors

		public ARSON1(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber} {this.Data1:X2}";

		#endregion
	}
	
	#endregion

	#region 0xBE ARSOF1 Accessory Short Response Event

	/// <summary>
	/// Accessory Short Response Event
	/// Indicates an ‘OFF’ response event with one added data byte. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.
	/// </summary>
	[OpCode(
		Code = "ARSOF1", 
		Description = "Indicates an ‘OFF’ response event with one added data byte. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.",
		Group = "Accessory", 
		Name = "Accessory Short Response Event", 
		Number = 190, 
		Priority = 3)]
	public partial class ARSOF1 : OpCodeData5 // 0xBE
	{
		#region Fields

		public const string _CODE = "ARSOF1";
		public const string _DESCRIPTION = "Indicates an ‘OFF’ response event with one added data byte. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short Response Event";
		public const byte _NUMBER = 0xBE; // 190
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}

		#endregion

		#region Constructors

		public ARSOF1(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber} {this.Data1:X2}";

		#endregion
	}
	
	#endregion

	#region 0xBF EXTC4 Extended opcode with 4 data bytes

	/// <summary>
	/// Extended opcode with 4 data bytes
	/// Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.
	/// </summary>
	[OpCode(
		Code = "EXTC4", 
		Description = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.",
		Group = "General", 
		Name = "Extended opcode with 4 data bytes", 
		Number = 191, 
		Priority = 3)]
	public partial class EXTC4 : OpCodeData5 // 0xBF
	{
		#region Fields

		public const string _CODE = "EXTC4";
		public const string _DESCRIPTION = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.";
		public const OpCodeGroup _GROUP = OpCodeGroup.General;
		public const string _NAME = "Extended opcode with 4 data bytes";
		public const byte _NUMBER = 0xBF; // 191
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte ExtendedOpCode
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte Data1
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}
		public byte Data2
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Data3
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}
		public byte Data4
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}

		#endregion

		#region Constructors

		public EXTC4(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.ExtendedOpCode:X2} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2} {this.Data4:X2}";

		#endregion
	}
	
	#endregion

	#region 0xC0 RDCC5 Request 5 byte DCC Packet

	/// <summary>
	/// Request 5 byte DCC Packet
	/// Allows a CAB or equivalent to request a 5 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.
	/// </summary>
	[OpCode(
		Code = "RDCC5", 
		Description = "Allows a CAB or equivalent to request a 5 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.",
		Group = "DCC", 
		Name = "Request 5 byte DCC Packet", 
		Number = 192, 
		Priority = 2)]
	public partial class RDCC5 : OpCodeData6 // 0xC0
	{
		#region Fields

		public const string _CODE = "RDCC5";
		public const string _DESCRIPTION = "Allows a CAB or equivalent to request a 5 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Request 5 byte DCC Packet";
		public const byte _NUMBER = 0xC0; // 192
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Repetitions
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte Data1
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}
		public byte Data2
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Data3
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}
		public byte Data4
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data5
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}

		#endregion

		#region Constructors

		public RDCC5(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Repetitions} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2} {this.Data4:X2} {this.Data5:X2}";

		#endregion
	}
	
	#endregion

	#region 0xC1 WCVOA Write CV (byte) in OPS mode by address

	/// <summary>
	/// Write CV (byte) in OPS mode by address
	/// Sent to the command station to write a DCC CV byte in OPS mode to specific loco (on the main). Used by computer based ops mode programmer that does not have a valid throttle handle.
	/// </summary>
	[OpCode(
		Code = "WCVOA", 
		Description = "Sent to the command station to write a DCC CV byte in OPS mode to specific loco (on the main). Used by computer based ops mode programmer that does not have a valid throttle handle.",
		Group = "DCC", 
		Name = "Write CV (byte) in OPS mode by address", 
		Number = 193, 
		Priority = 2)]
	public partial class WCVOA : OpCodeData6 // 0xC1
	{
		#region Fields

		public const string _CODE = "WCVOA";
		public const string _DESCRIPTION = "Sent to the command station to write a DCC CV byte in OPS mode to specific loco (on the main). Used by computer based ops mode programmer that does not have a valid throttle handle.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Write CV (byte) in OPS mode by address";
		public const byte _NUMBER = 0xC1; // 193
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short Address
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short CV
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Mode
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Value
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}

		#endregion

		#region Constructors

		public WCVOA(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Address} {this.CV} {this.Mode} {this.Value:X2}";

		#endregion
	}
	
	#endregion

	#region 0xCF FCLK Fast Clock

	/// <summary>
	/// Fast Clock
	/// Used to implement a fast clock for the layout.
	/// </summary>
	[OpCode(
		Code = "FCLK", 
		Description = "Used to implement a fast clock for the layout.",
		Group = "Accessory", 
		Name = "Fast Clock", 
		Number = 207, 
		Priority = 3)]
	public partial class FCLK : OpCodeData6 // 0xCF
	{
		#region Fields

		public const string _CODE = "FCLK";
		public const string _DESCRIPTION = "Used to implement a fast clock for the layout.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Fast Clock";
		public const byte _NUMBER = 0xCF; // 207
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Minutes
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte Hours
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}
		public WeekdayEnum Weekday
		{
			get => ConvertToEnum<WeekdayEnum>(3, new int[] { 0,1,2,3 });
			set => ConvertFromEnum<WeekdayEnum>(3, new int[] { 0,1,2,3 }, value);
		}
		public MonthEnum Month
		{
			get => ConvertToEnum<MonthEnum>(3, new int[] { 4,5,6,7 });
			set => ConvertFromEnum<MonthEnum>(3, new int[] { 4,5,6,7 }, value);
		}
		public byte Div
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}
		public byte MonthDay
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Temperature
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}

		#endregion

		#region Constructors

		public FCLK(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Minutes} {this.Hours} {this.Weekday:F} {this.Month:F} {this.Div:X2} {this.MonthDay} {this.Temperature}";

		#endregion
	}
	
	#endregion

	#region 0xD0 ACON2 Accessory On

	/// <summary>
	/// Accessory On
	/// Indicates an ‘ON’ event using the full event number of 4 bytes with two additional data bytes.
	/// </summary>
	[OpCode(
		Code = "ACON2", 
		Description = "Indicates an ‘ON’ event using the full event number of 4 bytes with two additional data bytes.",
		Group = "Accessory", 
		Name = "Accessory On", 
		Number = 208, 
		Priority = 3)]
	public partial class ACON2 : OpCodeData6 // 0xD0
	{
		#region Fields

		public const string _CODE = "ACON2";
		public const string _DESCRIPTION = "Indicates an ‘ON’ event using the full event number of 4 bytes with two additional data bytes.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory On";
		public const byte _NUMBER = 0xD0; // 208
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}

		#endregion

		#region Constructors

		public ACON2(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber} {this.Data1:X2} {this.Data2:X2}";

		#endregion
	}
	
	#endregion

	#region 0xD1 ACOF2 Accessory Off

	/// <summary>
	/// Accessory Off
	/// Indicates an ‘OFF’ event using the full event number of 4 bytes with two additional data bytes.
	/// </summary>
	[OpCode(
		Code = "ACOF2", 
		Description = "Indicates an ‘OFF’ event using the full event number of 4 bytes with two additional data bytes.",
		Group = "Accessory", 
		Name = "Accessory Off", 
		Number = 209, 
		Priority = 3)]
	public partial class ACOF2 : OpCodeData6 // 0xD1
	{
		#region Fields

		public const string _CODE = "ACOF2";
		public const string _DESCRIPTION = "Indicates an ‘OFF’ event using the full event number of 4 bytes with two additional data bytes.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Off";
		public const byte _NUMBER = 0xD1; // 209
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}

		#endregion

		#region Constructors

		public ACOF2(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber} {this.Data1:X2} {this.Data2:X2}";

		#endregion
	}
	
	#endregion

	#region 0xD2 EVLRN Teach an event in learn mode

	/// <summary>
	/// Teach an event in learn mode
	/// Sent by a configuration tool to a node in learn mode to teach it an event. Also teaches it the associated event variables (EVs) by the EV index (EV#). This command is repeated for each EV required.
	/// </summary>
	[OpCode(
		Code = "EVLRN", 
		Description = "Sent by a configuration tool to a node in learn mode to teach it an event. Also teaches it the associated event variables (EVs) by the EV index (EV#). This command is repeated for each EV required.",
		Group = "Config", 
		Name = "Teach an event in learn mode", 
		Number = 210, 
		Priority = 3)]
	public partial class EVLRN : OpCodeData6 // 0xD2
	{
		#region Fields

		public const string _CODE = "EVLRN";
		public const string _DESCRIPTION = "Sent by a configuration tool to a node in learn mode to teach it an event. Also teaches it the associated event variables (EVs) by the EV index (EV#). This command is repeated for each EV required.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Teach an event in learn mode";
		public const byte _NUMBER = 0xD2; // 210
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte EVIndex
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Value
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}

		#endregion

		#region Constructors

		public EVLRN(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber} {this.EVIndex} {this.Value:X2}";

		#endregion
	}
	
	#endregion

	#region 0xD3 EVANS Response to a request for an EV value in a node in learn mode

	/// <summary>
	/// Response to a request for an EV value in a node in learn mode
	/// A node response to a request from a configuration tool for the EVs associated with an event REQEV (0xB2). For multiple EVs
	/// </summary>
	[OpCode(
		Code = "EVANS", 
		Description = "A node response to a request from a configuration tool for the EVs associated with an event REQEV (0xB2). For multiple EVs",
		Group = "Config", 
		Name = "Response to a request for an EV value in a node in learn mode", 
		Number = 211, 
		Priority = 3)]
	public partial class EVANS : OpCodeData6 // 0xD3
	{
		#region Fields

		public const string _CODE = "EVANS";
		public const string _DESCRIPTION = "A node response to a request from a configuration tool for the EVs associated with an event REQEV (0xB2). For multiple EVs";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Response to a request for an EV value in a node in learn mode";
		public const byte _NUMBER = 0xD3; // 211
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte EVIndex
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Value
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}

		#endregion

		#region Constructors

		public EVANS(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber} {this.EVIndex} {this.Value:X2}";

		#endregion
	}
	
	#endregion

	#region 0xD4 ARON2 Accessory Response Event

	/// <summary>
	/// Accessory Response Event
	/// Indicates an ‘ON’ response event with two added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.
	/// </summary>
	[OpCode(
		Code = "ARON2", 
		Description = "Indicates an ‘ON’ response event with two added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.",
		Group = "Accessory", 
		Name = "Accessory Response Event", 
		Number = 212, 
		Priority = 3)]
	public partial class ARON2 : OpCodeData6 // 0xD4
	{
		#region Fields

		public const string _CODE = "ARON2";
		public const string _DESCRIPTION = "Indicates an ‘ON’ response event with two added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Response Event";
		public const byte _NUMBER = 0xD4; // 212
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}

		#endregion

		#region Constructors

		public ARON2(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber} {this.Data1:X2} {this.Data2:X2}";

		#endregion
	}
	
	#endregion

	#region 0xD5 AROF2 Accessory Response Event

	/// <summary>
	/// Accessory Response Event
	/// Indicates an ‘OFF’ response event with two added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.
	/// </summary>
	[OpCode(
		Code = "AROF2", 
		Description = "Indicates an ‘OFF’ response event with two added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.",
		Group = "Accessory", 
		Name = "Accessory Response Event", 
		Number = 213, 
		Priority = 3)]
	public partial class AROF2 : OpCodeData6 // 0xD5
	{
		#region Fields

		public const string _CODE = "AROF2";
		public const string _DESCRIPTION = "Indicates an ‘OFF’ response event with two added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Response Event";
		public const byte _NUMBER = 0xD5; // 213
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}

		#endregion

		#region Constructors

		public AROF2(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber} {this.Data1:X2} {this.Data2:X2}";

		#endregion
	}
	
	#endregion

	#region 0xD8 ASON2 Accessory Short On

	/// <summary>
	/// Accessory Short On
	/// Indicates an ‘ON’ event using the short event number of 2 LS bytes with two added data bytes.
	/// </summary>
	[OpCode(
		Code = "ASON2", 
		Description = "Indicates an ‘ON’ event using the short event number of 2 LS bytes with two added data bytes.",
		Group = "Accessory", 
		Name = "Accessory Short On", 
		Number = 216, 
		Priority = 3)]
	public partial class ASON2 : OpCodeData6 // 0xD8
	{
		#region Fields

		public const string _CODE = "ASON2";
		public const string _DESCRIPTION = "Indicates an ‘ON’ event using the short event number of 2 LS bytes with two added data bytes.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short On";
		public const byte _NUMBER = 0xD8; // 216
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}

		#endregion

		#region Constructors

		public ASON2(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber} {this.Data1:X2} {this.Data2:X2}";

		#endregion
	}
	
	#endregion

	#region 0xD9 ASOF2 Accessory Short Off

	/// <summary>
	/// Accessory Short Off
	/// Indicates an ‘OFF’ event using the short event number of 2 LS bytes with two added data bytes.
	/// </summary>
	[OpCode(
		Code = "ASOF2", 
		Description = "Indicates an ‘OFF’ event using the short event number of 2 LS bytes with two added data bytes.",
		Group = "Accessory", 
		Name = "Accessory Short Off", 
		Number = 217, 
		Priority = 3)]
	public partial class ASOF2 : OpCodeData6 // 0xD9
	{
		#region Fields

		public const string _CODE = "ASOF2";
		public const string _DESCRIPTION = "Indicates an ‘OFF’ event using the short event number of 2 LS bytes with two added data bytes.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short Off";
		public const byte _NUMBER = 0xD9; // 217
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}

		#endregion

		#region Constructors

		public ASOF2(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber} {this.Data1:X2} {this.Data2:X2}";

		#endregion
	}
	
	#endregion

	#region 0xDD ARSON2 Accessory Short Response with 2 data bytes

	/// <summary>
	/// Accessory Short Response with 2 data bytes
	/// Indicates an ‘ON’ response event with two added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.
	/// </summary>
	[OpCode(
		Code = "ARSON2", 
		Description = "Indicates an ‘ON’ response event with two added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.",
		Group = "Accessory", 
		Name = "Accessory Short Response with 2 data bytes", 
		Number = 221, 
		Priority = 3)]
	public partial class ARSON2 : OpCodeData6 // 0xDD
	{
		#region Fields

		public const string _CODE = "ARSON2";
		public const string _DESCRIPTION = "Indicates an ‘ON’ response event with two added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short Response with 2 data bytes";
		public const byte _NUMBER = 0xDD; // 221
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}

		#endregion

		#region Constructors

		public ARSON2(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber} {this.Data1:X2} {this.Data2:X2}";

		#endregion
	}
	
	#endregion

	#region 0xDE ARSOF2 Accessory Short Response with 2 data bytes

	/// <summary>
	/// Accessory Short Response with 2 data bytes
	/// Indicates an ‘OFF’ response event with two added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.
	/// </summary>
	[OpCode(
		Code = "ARSOF2", 
		Description = "Indicates an ‘OFF’ response event with two added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.",
		Group = "Accessory", 
		Name = "Accessory Short Response with 2 data bytes", 
		Number = 222, 
		Priority = 3)]
	public partial class ARSOF2 : OpCodeData6 // 0xDE
	{
		#region Fields

		public const string _CODE = "ARSOF2";
		public const string _DESCRIPTION = "Indicates an ‘OFF’ response event with two added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short Response with 2 data bytes";
		public const byte _NUMBER = 0xDE; // 222
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}

		#endregion

		#region Constructors

		public ARSOF2(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber} {this.Data1:X2} {this.Data2:X2}";

		#endregion
	}
	
	#endregion

	#region 0xDF EXTC5 Extended opcode with 5 data bytes

	/// <summary>
	/// Extended opcode with 5 data bytes
	/// Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.
	/// </summary>
	[OpCode(
		Code = "EXTC5", 
		Description = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.",
		Group = "General", 
		Name = "Extended opcode with 5 data bytes", 
		Number = 223, 
		Priority = 3)]
	public partial class EXTC5 : OpCodeData6 // 0xDF
	{
		#region Fields

		public const string _CODE = "EXTC5";
		public const string _DESCRIPTION = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.";
		public const OpCodeGroup _GROUP = OpCodeGroup.General;
		public const string _NAME = "Extended opcode with 5 data bytes";
		public const byte _NUMBER = 0xDF; // 223
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte ExtendedOpCode
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte Data1
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}
		public byte Data2
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Data3
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}
		public byte Data4
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data5
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}

		#endregion

		#region Constructors

		public EXTC5(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.ExtendedOpCode:X2} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2} {this.Data4:X2} {this.Data5:X2}";

		#endregion
	}
	
	#endregion

	#region 0xE0 RDCC6 Request 6 byte DCC packet

	/// <summary>
	/// Request 6 byte DCC packet
	/// Allows a CAB or equivalent to request a 6 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.
	/// </summary>
	[OpCode(
		Code = "RDCC6", 
		Description = "Allows a CAB or equivalent to request a 6 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.",
		Group = "DCC", 
		Name = "Request 6 byte DCC packet", 
		Number = 224, 
		Priority = 2)]
	public partial class RDCC6 : OpCodeData7 // 0xE0
	{
		#region Fields

		public const string _CODE = "RDCC6";
		public const string _DESCRIPTION = "Allows a CAB or equivalent to request a 6 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Request 6 byte DCC packet";
		public const byte _NUMBER = 0xE0; // 224
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Repetitions
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte Data1
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}
		public byte Data2
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Data3
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}
		public byte Data4
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data5
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Data6
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public RDCC6(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Repetitions} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2} {this.Data4:X2} {this.Data5:X2} {this.Data6:X2}";

		#endregion
	}
	
	#endregion

	#region 0xE1 PLOC Engine report

	/// <summary>
	/// Engine report
	/// A report of an engine entry sent by the command station. Sent in response to QLOC (0x22) or as an acknowledgement of acquiring an engine requested by a cab (RLOC (0x40) or GLOC (0x61)).
	/// </summary>
	[OpCode(
		Code = "PLOC", 
		Description = "A report of an engine entry sent by the command station. Sent in response to QLOC (0x22) or as an acknowledgement of acquiring an engine requested by a cab (RLOC (0x40) or GLOC (0x61)).",
		Group = "DCC", 
		Name = "Engine report", 
		Number = 225, 
		Priority = 2)]
	public partial class PLOC : OpCodeData7 // 0xE1
	{
		#region Fields

		public const string _CODE = "PLOC";
		public const string _DESCRIPTION = "A report of an engine entry sent by the command station. Sent in response to QLOC (0x22) or as an acknowledgement of acquiring an engine requested by a cab (RLOC (0x40) or GLOC (0x61)).";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Engine report";
		public const byte _NUMBER = 0xE1; // 225
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Session
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public short Address
		{
			get => ConvertToShort(new int[] { 2,3 });
			set => ConvertFromShort(new int[] { 2,3 }, value);
		}
		public byte SpeedDir
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}
		public byte Fn1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Fn2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Fn3
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public PLOC(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Session} {this.Address} {this.SpeedDir} {this.Fn1} {this.Fn2} {this.Fn3}";

		#endregion
	}
	
	#endregion

	#region 0xE2 NAME Response to request for node name string

	/// <summary>
	/// Response to request for node name string
	/// A node response while in ‘setup’ mode for its name string. Reply to RQMN (0x11). The Module Name prefix
	/// </summary>
	[OpCode(
		Code = "NAME", 
		Description = "A node response while in ‘setup’ mode for its name string. Reply to RQMN (0x11). The Module Name prefix",
		Group = "Config", 
		Name = "Response to request for node name string", 
		Number = 226, 
		Priority = 3)]
	public partial class NAME : OpCodeData7 // 0xE2
	{
		#region Fields

		public const string _CODE = "NAME";
		public const string _DESCRIPTION = "A node response while in ‘setup’ mode for its name string. Reply to RQMN (0x11). The Module Name prefix";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Response to request for node name string";
		public const byte _NUMBER = 0xE2; // 226
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public char Char1
		{
			get => ConvertToChar(1);
			set => ConvertFromChar(1, value);
		}
		public char Char2
		{
			get => ConvertToChar(2);
			set => ConvertFromChar(2, value);
		}
		public char Char3
		{
			get => ConvertToChar(3);
			set => ConvertFromChar(3, value);
		}
		public char Char4
		{
			get => ConvertToChar(4);
			set => ConvertFromChar(4, value);
		}
		public char Char5
		{
			get => ConvertToChar(5);
			set => ConvertFromChar(5, value);
		}
		public char Char6
		{
			get => ConvertToChar(6);
			set => ConvertFromChar(6, value);
		}
		public char Char7
		{
			get => ConvertToChar(7);
			set => ConvertFromChar(7, value);
		}

		#endregion

		#region Constructors

		public NAME(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Char1} {this.Char2} {this.Char3} {this.Char4} {this.Char5} {this.Char6} {this.Char7}";

		#endregion
	}
	
	#endregion

	#region 0xE3 STAT Command Station status report

	/// <summary>
	/// Command Station status report
	/// Sent by the command station in response to RSTAT (0x0C).
	/// </summary>
	[OpCode(
		Code = "STAT", 
		Description = "Sent by the command station in response to RSTAT (0x0C).",
		Group = "DCC", 
		Name = "Command Station status report", 
		Number = 227, 
		Priority = 2)]
	public partial class STAT : OpCodeData7 // 0xE3
	{
		#region Fields

		public const string _CODE = "STAT";
		public const string _DESCRIPTION = "Sent by the command station in response to RSTAT (0x0C).";
		public const OpCodeGroup _GROUP = OpCodeGroup.DCC;
		public const string _NAME = "Command Station status report";
		public const byte _NUMBER = 0xE3; // 227
		public const int _PRIORITY = 2;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte CSNumber
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public CSFlagsEnum CSFlags
		{
			get => ConvertToEnum<CSFlagsEnum>(4);
			set => ConvertFromEnum<CSFlagsEnum>(4, value);
		}
		public byte Major
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Minor
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Build
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public STAT(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.CSNumber} {this.CSFlags:F} {this.Major} {this.Minor} {this.Build}";

		#endregion
	}
	
	#endregion

	#region 0xEF PARAMS Response to request for node parameters

	/// <summary>
	/// Response to request for node parameters
	/// A node response while in ‘setup’ mode for its parameter string. Reply to RQNP (0x10).
	/// </summary>
	[OpCode(
		Code = "PARAMS", 
		Description = "A node response while in ‘setup’ mode for its parameter string. Reply to RQNP (0x10).",
		Group = "Config", 
		Name = "Response to request for node parameters", 
		Number = 239, 
		Priority = 3)]
	public partial class PARAMS : OpCodeData7 // 0xEF
	{
		#region Fields

		public const string _CODE = "PARAMS";
		public const string _DESCRIPTION = "A node response while in ‘setup’ mode for its parameter string. Reply to RQNP (0x10).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Response to request for node parameters";
		public const byte _NUMBER = 0xEF; // 239
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte Param1
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte Param2
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}
		public byte Param3
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Param4
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}
		public byte Param5
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Param6
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Param7
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public PARAMS(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.Param1:X2} {this.Param2:X2} {this.Param3:X2} {this.Param4:X2} {this.Param5:X2} {this.Param6:X2} {this.Param7:X2}";

		#endregion
	}
	
	#endregion

	#region 0xF0 ACON3 Accessory On

	/// <summary>
	/// Accessory On
	/// Indicates an ‘ON’ event using the full event number of 4 bytes with three additional data bytes.
	/// </summary>
	[OpCode(
		Code = "ACON3", 
		Description = "Indicates an ‘ON’ event using the full event number of 4 bytes with three additional data bytes.",
		Group = "Accessory", 
		Name = "Accessory On", 
		Number = 240, 
		Priority = 3)]
	public partial class ACON3 : OpCodeData7 // 0xF0
	{
		#region Fields

		public const string _CODE = "ACON3";
		public const string _DESCRIPTION = "Indicates an ‘ON’ event using the full event number of 4 bytes with three additional data bytes.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory On";
		public const byte _NUMBER = 0xF0; // 240
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Data3
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public ACON3(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2}";

		#endregion
	}
	
	#endregion

	#region 0xF1 ACOF3 Accessory Off

	/// <summary>
	/// Accessory Off
	/// Indicates an ‘OFF’ event using the full event number of 4 bytes with three additional data bytes.
	/// </summary>
	[OpCode(
		Code = "ACOF3", 
		Description = "Indicates an ‘OFF’ event using the full event number of 4 bytes with three additional data bytes.",
		Group = "Accessory", 
		Name = "Accessory Off", 
		Number = 241, 
		Priority = 3)]
	public partial class ACOF3 : OpCodeData7 // 0xF1
	{
		#region Fields

		public const string _CODE = "ACOF3";
		public const string _DESCRIPTION = "Indicates an ‘OFF’ event using the full event number of 4 bytes with three additional data bytes.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Off";
		public const byte _NUMBER = 0xF1; // 241
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Data3
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public ACOF3(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2}";

		#endregion
	}
	
	#endregion

	#region 0xF2 ENRSP Response to request to read node events

	/// <summary>
	/// Response to request to read node events
	/// This is a response to either NERD (0x57) or NENRD (0x72).
	/// </summary>
	[OpCode(
		Code = "ENRSP", 
		Description = "This is a response to either NERD (0x57) or NENRD (0x72).",
		Group = "Config", 
		Name = "Response to request to read node events", 
		Number = 242, 
		Priority = 3)]
	public partial class ENRSP : OpCodeData7 // 0xF2
	{
		#region Fields

		public const string _CODE = "ENRSP";
		public const string _DESCRIPTION = "This is a response to either NERD (0x57) or NENRD (0x72).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Response to request to read node events";
		public const byte _NUMBER = 0xF2; // 242
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public int EventData
		{
			get => ConvertToInt(new int[] { 3,4,5,6 });
			set => ConvertFromInt(new int[] { 3,4,5,6 }, value);
		}
		public byte ENIndex
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public ENRSP(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventData:X2} {this.ENIndex}";

		#endregion
	}
	
	#endregion

	#region 0xF3 ARON3 Accessory Response Event On

	/// <summary>
	/// Accessory Response Event On
	/// Indicates an ‘ON’ response event with three added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.
	/// </summary>
	[OpCode(
		Code = "ARON3", 
		Description = "Indicates an ‘ON’ response event with three added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.",
		Group = "Accessory", 
		Name = "Accessory Response Event On", 
		Number = 243, 
		Priority = 3)]
	public partial class ARON3 : OpCodeData7 // 0xF3
	{
		#region Fields

		public const string _CODE = "ARON3";
		public const string _DESCRIPTION = "Indicates an ‘ON’ response event with three added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Response Event On";
		public const byte _NUMBER = 0xF3; // 243
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Data3
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public ARON3(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2}";

		#endregion
	}
	
	#endregion

	#region 0xF4 AROF3 Accessory Response Event Off

	/// <summary>
	/// Accessory Response Event Off
	/// Indicates an ‘OFF’ response event with three added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.
	/// </summary>
	[OpCode(
		Code = "AROF3", 
		Description = "Indicates an ‘OFF’ response event with three added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.",
		Group = "Accessory", 
		Name = "Accessory Response Event Off", 
		Number = 244, 
		Priority = 3)]
	public partial class AROF3 : OpCodeData7 // 0xF4
	{
		#region Fields

		public const string _CODE = "AROF3";
		public const string _DESCRIPTION = "Indicates an ‘OFF’ response event with three added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Response Event Off";
		public const byte _NUMBER = 0xF4; // 244
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Data3
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public AROF3(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2}";

		#endregion
	}
	
	#endregion

	#region 0xF5 EVLRNI Teach an event in learn mode using event indexing

	/// <summary>
	/// Teach an event in learn mode using event indexing
	/// Sent by a configuration tool to a node in learn mode to teach it an event. The event index must be known. Also teaches it the associated event variables.(EVs). This command is repeated for each EV required.
	/// </summary>
	[OpCode(
		Code = "EVLRNI", 
		Description = "Sent by a configuration tool to a node in learn mode to teach it an event. The event index must be known. Also teaches it the associated event variables.(EVs). This command is repeated for each EV required.",
		Group = "Config", 
		Name = "Teach an event in learn mode using event indexing", 
		Number = 245, 
		Priority = 3)]
	public partial class EVLRNI : OpCodeData7 // 0xF5
	{
		#region Fields

		public const string _CODE = "EVLRNI";
		public const string _DESCRIPTION = "Sent by a configuration tool to a node in learn mode to teach it an event. The event index must be known. Also teaches it the associated event variables.(EVs). This command is repeated for each EV required.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Config;
		public const string _NAME = "Teach an event in learn mode using event indexing";
		public const byte _NUMBER = 0xF5; // 245
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short EventNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte ENIndex
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte EVIndex
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Value
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public EVLRNI(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.EventNumber} {this.ENIndex} {this.EVIndex} {this.Value:X2}";

		#endregion
	}
	
	#endregion

	#region 0xF6 ACDAT Accessory node data event

	/// <summary>
	/// Accessory node data event
	/// Indicates an event from this node with 5 bytes of data. For example
	/// </summary>
	[OpCode(
		Code = "ACDAT", 
		Description = "Indicates an event from this node with 5 bytes of data. For example",
		Group = "Accessory", 
		Name = "Accessory node data event", 
		Number = 246, 
		Priority = 3)]
	public partial class ACDAT : OpCodeData7 // 0xF6
	{
		#region Fields

		public const string _CODE = "ACDAT";
		public const string _DESCRIPTION = "Indicates an event from this node with 5 bytes of data. For example";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory node data event";
		public const byte _NUMBER = 0xF6; // 246
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Data2
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}
		public byte Data3
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data4
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Data5
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public ACDAT(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2} {this.Data4:X2} {this.Data5:X2}";

		#endregion
	}
	
	#endregion

	#region 0xF7 ARDAT Accessory node data Response

	/// <summary>
	/// Accessory node data Response
	/// Indicates a node data response. A response event is a reply to a status request RQDAT (0x5A) without producing a new data event.
	/// </summary>
	[OpCode(
		Code = "ARDAT", 
		Description = "Indicates a node data response. A response event is a reply to a status request RQDAT (0x5A) without producing a new data event.",
		Group = "Accessory", 
		Name = "Accessory node data Response", 
		Number = 247, 
		Priority = 3)]
	public partial class ARDAT : OpCodeData7 // 0xF7
	{
		#region Fields

		public const string _CODE = "ARDAT";
		public const string _DESCRIPTION = "Indicates a node data response. A response event is a reply to a status request RQDAT (0x5A) without producing a new data event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory node data Response";
		public const byte _NUMBER = 0xF7; // 247
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Data2
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}
		public byte Data3
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data4
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Data5
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public ARDAT(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2} {this.Data4:X2} {this.Data5:X2}";

		#endregion
	}
	
	#endregion

	#region 0xF8 ASON3 Accessory Short On

	/// <summary>
	/// Accessory Short On
	/// Indicates an ‘ON’ event using the short event number of 2 LS bytes with three added data bytes.
	/// </summary>
	[OpCode(
		Code = "ASON3", 
		Description = "Indicates an ‘ON’ event using the short event number of 2 LS bytes with three added data bytes.",
		Group = "Accessory", 
		Name = "Accessory Short On", 
		Number = 248, 
		Priority = 3)]
	public partial class ASON3 : OpCodeData7 // 0xF8
	{
		#region Fields

		public const string _CODE = "ASON3";
		public const string _DESCRIPTION = "Indicates an ‘ON’ event using the short event number of 2 LS bytes with three added data bytes.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short On";
		public const byte _NUMBER = 0xF8; // 248
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Data3
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public ASON3(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2}";

		#endregion
	}
	
	#endregion

	#region 0xF9 ASOF3 Accessory Short Off

	/// <summary>
	/// Accessory Short Off
	/// Indicates an ‘OFF’ event using the short event number of 2 LS bytes with three added data bytes.
	/// </summary>
	[OpCode(
		Code = "ASOF3", 
		Description = "Indicates an ‘OFF’ event using the short event number of 2 LS bytes with three added data bytes.",
		Group = "Accessory", 
		Name = "Accessory Short Off", 
		Number = 249, 
		Priority = 3)]
	public partial class ASOF3 : OpCodeData7 // 0xF9
	{
		#region Fields

		public const string _CODE = "ASOF3";
		public const string _DESCRIPTION = "Indicates an ‘OFF’ event using the short event number of 2 LS bytes with three added data bytes.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short Off";
		public const byte _NUMBER = 0xF9; // 249
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Data3
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public ASOF3(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2}";

		#endregion
	}
	
	#endregion

	#region 0xFA DDES Device data event (short mode)

	/// <summary>
	/// Device data event (short mode)
	/// Function is the same as ACDAT (0xF6) but uses device addressing so can relate data to a device attached to a node. e.g. one of several RFID readers attached to a single node.
	/// </summary>
	[OpCode(
		Code = "DDES", 
		Description = "Function is the same as ACDAT (0xF6) but uses device addressing so can relate data to a device attached to a node. e.g. one of several RFID readers attached to a single node.",
		Group = "Accessory", 
		Name = "Device data event (short mode)", 
		Number = 250, 
		Priority = 3)]
	public partial class DDES : OpCodeData7 // 0xFA
	{
		#region Fields

		public const string _CODE = "DDES";
		public const string _DESCRIPTION = "Function is the same as ACDAT (0xF6) but uses device addressing so can relate data to a device attached to a node. e.g. one of several RFID readers attached to a single node.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Device data event (short mode)";
		public const byte _NUMBER = 0xFA; // 250
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Data2
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}
		public byte Data3
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data4
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Data5
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public DDES(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.DeviceNumber} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2} {this.Data4:X2} {this.Data5:X2}";

		#endregion
	}
	
	#endregion

	#region 0xFB DDRS Device data response (short mode)

	/// <summary>
	/// Device data response (short mode)
	/// The response to a request for data from a device RQDDS (0x5B).
	/// </summary>
	[OpCode(
		Code = "DDRS", 
		Description = "The response to a request for data from a device RQDDS (0x5B).",
		Group = "Accessory", 
		Name = "Device data response (short mode)", 
		Number = 251, 
		Priority = 3)]
	public partial class DDRS : OpCodeData7 // 0xFB
	{
		#region Fields

		public const string _CODE = "DDRS";
		public const string _DESCRIPTION = "The response to a request for data from a device RQDDS (0x5B).";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Device data response (short mode)";
		public const byte _NUMBER = 0xFB; // 251
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Data2
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}
		public byte Data3
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data4
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Data5
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public DDRS(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.DeviceNumber} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2} {this.Data4:X2} {this.Data5:X2}";

		#endregion
	}
	
	#endregion

	#region 0xFD ARSON3 Accessory Short Response Event

	/// <summary>
	/// Accessory Short Response Event
	/// Indicates an ‘ON’ response event with with three added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.
	/// </summary>
	[OpCode(
		Code = "ARSON3", 
		Description = "Indicates an ‘ON’ response event with with three added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.",
		Group = "Accessory", 
		Name = "Accessory Short Response Event", 
		Number = 253, 
		Priority = 3)]
	public partial class ARSON3 : OpCodeData7 // 0xFD
	{
		#region Fields

		public const string _CODE = "ARSON3";
		public const string _DESCRIPTION = "Indicates an ‘ON’ response event with with three added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short Response Event";
		public const byte _NUMBER = 0xFD; // 253
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Data3
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public ARSON3(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2}";

		#endregion
	}
	
	#endregion

	#region 0xFE ARSOF3 Accessory Short Response Event

	/// <summary>
	/// Accessory Short Response Event
	/// Indicates an ‘OFF’ response event with with three added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.
	/// </summary>
	[OpCode(
		Code = "ARSOF3", 
		Description = "Indicates an ‘OFF’ response event with with three added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.",
		Group = "Accessory", 
		Name = "Accessory Short Response Event", 
		Number = 254, 
		Priority = 3)]
	public partial class ARSOF3 : OpCodeData7 // 0xFE
	{
		#region Fields

		public const string _CODE = "ARSOF3";
		public const string _DESCRIPTION = "Indicates an ‘OFF’ response event with with three added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.";
		public const OpCodeGroup _GROUP = OpCodeGroup.Accessory;
		public const string _NAME = "Accessory Short Response Event";
		public const byte _NUMBER = 0xFE; // 254
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public short NodeNumber
		{
			get => ConvertToShort(new int[] { 1,2 });
			set => ConvertFromShort(new int[] { 1,2 }, value);
		}
		public short DeviceNumber
		{
			get => ConvertToShort(new int[] { 3,4 });
			set => ConvertFromShort(new int[] { 3,4 }, value);
		}
		public byte Data1
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data2
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Data3
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public ARSOF3(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.NodeNumber} {this.DeviceNumber} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2}";

		#endregion
	}
	
	#endregion

	#region 0xFF EXTC6 Extended opcode with 6 da bytes

	/// <summary>
	/// Extended opcode with 6 da bytes
	/// Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.
	/// </summary>
	[OpCode(
		Code = "EXTC6", 
		Description = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.",
		Group = "General", 
		Name = "Extended opcode with 6 da bytes", 
		Number = 255, 
		Priority = 3)]
	public partial class EXTC6 : OpCodeData7 // 0xFF
	{
		#region Fields

		public const string _CODE = "EXTC6";
		public const string _DESCRIPTION = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.";
		public const OpCodeGroup _GROUP = OpCodeGroup.General;
		public const string _NAME = "Extended opcode with 6 da bytes";
		public const byte _NUMBER = 0xFF; // 255
		public const int _PRIORITY = 3;

		#endregion

		#region Override properties

		public override string Code => _CODE;
		public override string Description => _DESCRIPTION;
		public override OpCodeGroup Group => _GROUP;
		public override string Name => _NAME;
		public override byte Number => _NUMBER;
		public override int Priority => _PRIORITY;

		#endregion

		#region Properties

		public byte ExtendedOpCode
		{
			get => ConvertToByte(1);
			set => ConvertFromByte(1, value);
		}
		public byte Data1
		{
			get => ConvertToByte(2);
			set => ConvertFromByte(2, value);
		}
		public byte Data2
		{
			get => ConvertToByte(3);
			set => ConvertFromByte(3, value);
		}
		public byte Data3
		{
			get => ConvertToByte(4);
			set => ConvertFromByte(4, value);
		}
		public byte Data4
		{
			get => ConvertToByte(5);
			set => ConvertFromByte(5, value);
		}
		public byte Data5
		{
			get => ConvertToByte(6);
			set => ConvertFromByte(6, value);
		}
		public byte Data6
		{
			get => ConvertToByte(7);
			set => ConvertFromByte(7, value);
		}

		#endregion

		#region Constructors

		public EXTC6(ICbusMessage cbusMessage) : base(cbusMessage) { }

		#endregion

		#region Overrides

		public override string ToString() => $"{this.Number} {this.ExtendedOpCode:X2} {this.Data1:X2} {this.Data2:X2} {this.Data3:X2} {this.Data4:X2} {this.Data5:X2} {this.Data6:X2}";

		#endregion
	}
	
	#endregion

	#endregion
}
