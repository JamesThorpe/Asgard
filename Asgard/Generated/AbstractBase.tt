<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
<#@ include file="Common.t4" once="true" #>
<#	var filename = this.Host.ResolvePath("cbus-opcodes.txt");
#>
using System;

/*	This file is automatically generated by a T4 template from a data file.
	<#= filename #>
	Any changes made manually will be lost when the file is regenerated.
*/
<#	var loader = new Loader(filename);
	loader.Load();

	var builder = new Builder(loader);
	builder.Build();
#>

namespace Asgard
{
	#region Licence

/*
<#= builder.LicenceBlock.Text #>
 *	*/
	#endregion

	#region History

/*	Date		Author
<#= builder.HistoryBlock.Text #>
 *	*/

	#endregion

<#	if (!string.IsNullOrEmpty(builder.FileCommentBlock?.Text))
	{
#>
/*
<#= builder.FileCommentBlock.Text #>
 *	*/

<#	}
#>
	#region Common abstract base class

	/// <summary>
	/// Abstract base class for all OpCodes.
	/// </summary>
	public abstract partial class OpCodeData
	{
		#region Abstract properties

		/// <summary>
		/// Gets the code.
		/// </summary>
		public abstract string Code { get; }
		
		/// <summary>
		/// Gets the number of data-bytes.
		/// </summary>
		public abstract int DataLength { get; }
		
		/// <summary>
		/// Gets the description.
		/// </summary>
		public abstract string Description { get; }

		/// <summary>
		/// Gets the group.
		/// </summary>
		public abstract OpCodeGroup Group { get; }

		/// <summary>
		/// Gets the name.
		/// </summary>
		public abstract string Name { get; }

		/// <summary>
		/// Gets the op-code number.
		/// </summary>
		public abstract byte Number { get; }
		
		/// <summary>
		/// Gets the op-code priority.
		/// </summary>
		public abstract int Priority { get; }
		
		/// <summary>
		/// Gets the op-code data.
		/// </summary>
		public abstract byte[] Data { get; }

		#endregion

		#region Constructors

		protected OpCodeData() {}

		#endregion
	}

	#endregion

<#	foreach (var suffix in builder.OpCodeBaseAbstractClassSuffixes)
	{
#>
	#region Abstract base class for OpCodes with <#= suffix #> data bytes

	/// <summary>
	/// Abstract base class for OpCodes with <#= suffix #> data bytes.
	/// </summary>
	public abstract partial class OpCodeData<#= suffix #> : OpCodeData
	{
		#region Fields

		public const int DATA_LENGTH = <#= suffix #>;

		#endregion

		#region Properties

		public override sealed int DataLength => DATA_LENGTH;

<#		if (suffix == 0)
		{
#>
		public override sealed byte[] Data { get; } = Array.Empty<byte>();
<#		}
		else
		{
#>
		public override sealed byte[] Data { get; } = new byte[DATA_LENGTH];
<#		}
#>

		#endregion

		#region Constructors

		protected OpCodeData<#= suffix #>() : base() { }

		protected OpCodeData<#= suffix #>(byte[] data) : this() => data[0..DATA_LENGTH].CopyTo(this.Data, 0);

		#endregion
	}
	
	#endregion

<#	}
#>
}
