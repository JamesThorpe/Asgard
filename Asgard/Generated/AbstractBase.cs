using System;

/*	This file is automatically generated by a T4 template from a data file.
	C:\Users\richa\source\repos\Asgard\Asgard\Generated\cbus-opcodes.txt
	Any changes made manually will be lost when the file is regenerated.
*/

namespace Asgard
{
	#region Licence

/*
 *	This work is licensed under the:
 *	    Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 *	To view a copy of this license, visit:
 *	    http://creativecommons.org/licenses/by-nc-sa/4.0/
 *	or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *	
 *	License summary:
 *	  You are free to:
 *	    Share, copy and redistribute the material in any medium or format
 *	    Adapt, remix, transform, and build upon the material
 *	
 *	  The licensor cannot revoke these freedoms as long as you follow the license terms.
 *	
 *	  Attribution : You must give appropriate credit, provide a link to the license,
 *	                 and indicate if changes were made. You may do so in any reasonable manner,
 *	                 but not in any way that suggests the licensor endorses you or your use.
 *	
 *	  NonCommercial : You may not use the material for commercial purposes. **(see note below)
 *	
 *	  ShareAlike : If you remix, transform, or build upon the material, you must distribute
 *	                your contributions under the same license as the original.
 *	
 *	  No additional restrictions : You may not apply legal terms or technological measures that
 *	                                legally restrict others from doing anything the license permits.
 *	
 *	 ** For commercial use, please contact the original copyright holder(s) to agree licensing terms
 *	
 *	  This software is distributed in the hope that it will be useful, but WITHOUT ANY
 *	  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE

 *	*/
	#endregion

	#region History

/*	Date		Author
 *	2021-11-06	Richard Crawshaw	Original from Developers' Guide for CBUS version 6b

 *	*/

	#endregion

	#region Common abstract base class

	/// <summary>
	/// Abstract base class for all OpCodes.
	/// </summary>
	public abstract partial class OpCodeData
	{
		#region Abstract properties

		/// <summary>
		/// Gets the code.
		/// </summary>
		public abstract string Code { get; }
		
		/// <summary>
		/// Gets the number of data-bytes.
		/// </summary>
		public abstract int DataLength { get; }
		
		/// <summary>
		/// Gets the description.
		/// </summary>
		public abstract string Description { get; }

		/// <summary>
		/// Gets the group.
		/// </summary>
		public abstract OpCodeGroup Group { get; }

		/// <summary>
		/// Gets the name.
		/// </summary>
		public abstract string Name { get; }

		/// <summary>
		/// Gets the op-code number.
		/// </summary>
		public abstract byte Number { get; }
		
		/// <summary>
		/// Gets the op-code priority.
		/// </summary>
		public abstract int Priority { get; }
		
		/// <summary>
		/// Gets the op-code data.
		/// </summary>
		public abstract byte[] Data { get; }

		#endregion

		#region Constructors

		protected OpCodeData() {}

		#endregion
	}

	#endregion

	#region Abstract base class for OpCodes with 0 data bytes

	/// <summary>
	/// Abstract base class for OpCodes with 0 data bytes.
	/// </summary>
	public abstract partial class OpCodeData0 : OpCodeData
	{
		#region Fields

		public const int DATA_LENGTH = 0;

		#endregion

		#region Properties

		public override sealed int DataLength => DATA_LENGTH;

		public override sealed byte[] Data { get; } = Array.Empty<byte>();

		#endregion

		#region Constructors

		protected OpCodeData0() : base() { }

		protected OpCodeData0(byte[] data) : this() => data[0..DATA_LENGTH].CopyTo(this.Data, 0);

		#endregion
	}
	
	#endregion

	#region Abstract base class for OpCodes with 1 data bytes

	/// <summary>
	/// Abstract base class for OpCodes with 1 data bytes.
	/// </summary>
	public abstract partial class OpCodeData1 : OpCodeData
	{
		#region Fields

		public const int DATA_LENGTH = 1;

		#endregion

		#region Properties

		public override sealed int DataLength => DATA_LENGTH;

		public override sealed byte[] Data { get; } = new byte[DATA_LENGTH];

		#endregion

		#region Constructors

		protected OpCodeData1() : base() { }

		protected OpCodeData1(byte[] data) : this() => data[0..DATA_LENGTH].CopyTo(this.Data, 0);

		#endregion
	}
	
	#endregion

	#region Abstract base class for OpCodes with 2 data bytes

	/// <summary>
	/// Abstract base class for OpCodes with 2 data bytes.
	/// </summary>
	public abstract partial class OpCodeData2 : OpCodeData
	{
		#region Fields

		public const int DATA_LENGTH = 2;

		#endregion

		#region Properties

		public override sealed int DataLength => DATA_LENGTH;

		public override sealed byte[] Data { get; } = new byte[DATA_LENGTH];

		#endregion

		#region Constructors

		protected OpCodeData2() : base() { }

		protected OpCodeData2(byte[] data) : this() => data[0..DATA_LENGTH].CopyTo(this.Data, 0);

		#endregion
	}
	
	#endregion

	#region Abstract base class for OpCodes with 3 data bytes

	/// <summary>
	/// Abstract base class for OpCodes with 3 data bytes.
	/// </summary>
	public abstract partial class OpCodeData3 : OpCodeData
	{
		#region Fields

		public const int DATA_LENGTH = 3;

		#endregion

		#region Properties

		public override sealed int DataLength => DATA_LENGTH;

		public override sealed byte[] Data { get; } = new byte[DATA_LENGTH];

		#endregion

		#region Constructors

		protected OpCodeData3() : base() { }

		protected OpCodeData3(byte[] data) : this() => data[0..DATA_LENGTH].CopyTo(this.Data, 0);

		#endregion
	}
	
	#endregion

	#region Abstract base class for OpCodes with 4 data bytes

	/// <summary>
	/// Abstract base class for OpCodes with 4 data bytes.
	/// </summary>
	public abstract partial class OpCodeData4 : OpCodeData
	{
		#region Fields

		public const int DATA_LENGTH = 4;

		#endregion

		#region Properties

		public override sealed int DataLength => DATA_LENGTH;

		public override sealed byte[] Data { get; } = new byte[DATA_LENGTH];

		#endregion

		#region Constructors

		protected OpCodeData4() : base() { }

		protected OpCodeData4(byte[] data) : this() => data[0..DATA_LENGTH].CopyTo(this.Data, 0);

		#endregion
	}
	
	#endregion

	#region Abstract base class for OpCodes with 5 data bytes

	/// <summary>
	/// Abstract base class for OpCodes with 5 data bytes.
	/// </summary>
	public abstract partial class OpCodeData5 : OpCodeData
	{
		#region Fields

		public const int DATA_LENGTH = 5;

		#endregion

		#region Properties

		public override sealed int DataLength => DATA_LENGTH;

		public override sealed byte[] Data { get; } = new byte[DATA_LENGTH];

		#endregion

		#region Constructors

		protected OpCodeData5() : base() { }

		protected OpCodeData5(byte[] data) : this() => data[0..DATA_LENGTH].CopyTo(this.Data, 0);

		#endregion
	}
	
	#endregion

	#region Abstract base class for OpCodes with 6 data bytes

	/// <summary>
	/// Abstract base class for OpCodes with 6 data bytes.
	/// </summary>
	public abstract partial class OpCodeData6 : OpCodeData
	{
		#region Fields

		public const int DATA_LENGTH = 6;

		#endregion

		#region Properties

		public override sealed int DataLength => DATA_LENGTH;

		public override sealed byte[] Data { get; } = new byte[DATA_LENGTH];

		#endregion

		#region Constructors

		protected OpCodeData6() : base() { }

		protected OpCodeData6(byte[] data) : this() => data[0..DATA_LENGTH].CopyTo(this.Data, 0);

		#endregion
	}
	
	#endregion

	#region Abstract base class for OpCodes with 7 data bytes

	/// <summary>
	/// Abstract base class for OpCodes with 7 data bytes.
	/// </summary>
	public abstract partial class OpCodeData7 : OpCodeData
	{
		#region Fields

		public const int DATA_LENGTH = 7;

		#endregion

		#region Properties

		public override sealed int DataLength => DATA_LENGTH;

		public override sealed byte[] Data { get; } = new byte[DATA_LENGTH];

		#endregion

		#region Constructors

		protected OpCodeData7() : base() { }

		protected OpCodeData7(byte[] data) : this() => data[0..DATA_LENGTH].CopyTo(this.Data, 0);

		#endregion
	}
	
	#endregion

}
