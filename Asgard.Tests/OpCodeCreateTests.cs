using NUnit.Framework;

/*	This file is automatically generated by a T4 template from a data file.
	C:\Users\richa\source\repos\Asgard\Asgard.Tests\cbusdefs.csv
	Any changes made manually will be lost when the file is regenerated.
*/

namespace Asgard.Tests
{
	[TestFixture]
	public class OpCodeCreateTests
	{
		[SetUp]
		public void Setup()
		{
		}


		[Test]
		public void CreateACKTest()
		{
			var data = new byte[]
			{
				0x00,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACK"));
            });
		}

		[Test]
		public void CreateNAKTest()
		{
			var data = new byte[]
			{
				0x01,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NAK"));
            });
		}

		[Test]
		public void CreateHLTTest()
		{
			var data = new byte[]
			{
				0x02,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("HLT"));
            });
		}

		[Test]
		public void CreateBONTest()
		{
			var data = new byte[]
			{
				0x03,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("BON"));
            });
		}

		[Test]
		public void CreateTOFTest()
		{
			var data = new byte[]
			{
				0x04,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("TOF"));
            });
		}

		[Test]
		public void CreateTONTest()
		{
			var data = new byte[]
			{
				0x05,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("TON"));
            });
		}

		[Test]
		public void CreateESTOPTest()
		{
			var data = new byte[]
			{
				0x06,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ESTOP"));
            });
		}

		[Test]
		public void CreateARSTTest()
		{
			var data = new byte[]
			{
				0x07,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARST"));
            });
		}

		[Test]
		public void CreateRTOFTest()
		{
			var data = new byte[]
			{
				0x08,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RTOF"));
            });
		}

		[Test]
		public void CreateRTONTest()
		{
			var data = new byte[]
			{
				0x09,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RTON"));
            });
		}

		[Test]
		public void CreateRESTPTest()
		{
			var data = new byte[]
			{
				0x0a,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RESTP"));
            });
		}

		[Test]
		public void CreateRSTATTest()
		{
			var data = new byte[]
			{
				0x0c,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RSTAT"));
            });
		}

		[Test]
		public void CreateQNNTest()
		{
			var data = new byte[]
			{
				0x0d,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("QNN"));
            });
		}

		[Test]
		public void CreateRQNPTest()
		{
			var data = new byte[]
			{
				0x10,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RQNP"));
            });
		}

		[Test]
		public void CreateRQMNTest()
		{
			var data = new byte[]
			{
				0x11,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RQMN"));
            });
		}

		[Test]
		public void CreateKLOCTest()
		{
			var data = new byte[]
			{
				0x21,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("KLOC"));
            });
		}

		[Test]
		public void CreateQLOCTest()
		{
			var data = new byte[]
			{
				0x22,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("QLOC"));
            });
		}

		[Test]
		public void CreateDKEEPTest()
		{
			var data = new byte[]
			{
				0x23,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DKEEP"));
            });
		}

		[Test]
		public void CreateDBG1Test()
		{
			var data = new byte[]
			{
				0x30,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DBG1"));
            });
		}

		[Test]
		public void CreateEXTCTest()
		{
			var data = new byte[]
			{
				0x3F,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EXTC"));
            });
		}

		[Test]
		public void CreateRLOCTest()
		{
			var data = new byte[]
			{
				0x40,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RLOC"));
            });
		}

		[Test]
		public void CreateQCONTest()
		{
			var data = new byte[]
			{
				0x41,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("QCON"));
            });
		}

		[Test]
		public void CreateSNNTest()
		{
			var data = new byte[]
			{
				0x42,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("SNN"));
            });
		}

		[Test]
		public void CreateSTMODTest()
		{
			var data = new byte[]
			{
				0x44,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("STMOD"));
            });
		}

		[Test]
		public void CreatePCONTest()
		{
			var data = new byte[]
			{
				0x45,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("PCON"));
            });
		}

		[Test]
		public void CreateKCONTest()
		{
			var data = new byte[]
			{
				0x46,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("KCON"));
            });
		}

		[Test]
		public void CreateDSPDTest()
		{
			var data = new byte[]
			{
				0x47,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DSPD"));
            });
		}

		[Test]
		public void CreateDFLGTest()
		{
			var data = new byte[]
			{
				0x48,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DFLG"));
            });
		}

		[Test]
		public void CreateDFNONTest()
		{
			var data = new byte[]
			{
				0x49,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DFNON"));
            });
		}

		[Test]
		public void CreateDFNOFTest()
		{
			var data = new byte[]
			{
				0x4A,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DFNOF"));
            });
		}

		[Test]
		public void CreateSSTATTest()
		{
			var data = new byte[]
			{
				0x4C,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("SSTAT"));
            });
		}

		[Test]
		public void CreateNNRSMTest()
		{
			var data = new byte[]
			{
				0x4F,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NNRSM"));
            });
		}

		[Test]
		public void CreateRQNNTest()
		{
			var data = new byte[]
			{
				0x50,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RQNN"));
            });
		}

		[Test]
		public void CreateNNRELTest()
		{
			var data = new byte[]
			{
				0x51,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NNREL"));
            });
		}

		[Test]
		public void CreateNNACKTest()
		{
			var data = new byte[]
			{
				0x52,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NNACK"));
            });
		}

		[Test]
		public void CreateNNLRNTest()
		{
			var data = new byte[]
			{
				0x53,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NNLRN"));
            });
		}

		[Test]
		public void CreateNNULNTest()
		{
			var data = new byte[]
			{
				0x54,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NNULN"));
            });
		}

		[Test]
		public void CreateNNCLRTest()
		{
			var data = new byte[]
			{
				0x55,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NNCLR"));
            });
		}

		[Test]
		public void CreateNNEVNTest()
		{
			var data = new byte[]
			{
				0x56,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NNEVN"));
            });
		}

		[Test]
		public void CreateNERDTest()
		{
			var data = new byte[]
			{
				0x57,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NERD"));
            });
		}

		[Test]
		public void CreateRQEVNTest()
		{
			var data = new byte[]
			{
				0x58,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RQEVN"));
            });
		}

		[Test]
		public void CreateWRACKTest()
		{
			var data = new byte[]
			{
				0x59,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("WRACK"));
            });
		}

		[Test]
		public void CreateRQDATTest()
		{
			var data = new byte[]
			{
				0x5A,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RQDAT"));
            });
		}

		[Test]
		public void CreateRQDDSTest()
		{
			var data = new byte[]
			{
				0x5B,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RQDDS"));
            });
		}

		[Test]
		public void CreateBOOTTest()
		{
			var data = new byte[]
			{
				0x5C,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("BOOT"));
            });
		}

		[Test]
		public void CreateENUMTest()
		{
			var data = new byte[]
			{
				0x5D,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ENUM"));
            });
		}

		[Test]
		public void CreateNNRSTTest()
		{
			var data = new byte[]
			{
				0x5E,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NNRST"));
            });
		}

		[Test]
		public void CreateEXTC1Test()
		{
			var data = new byte[]
			{
				0x5F,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EXTC1"));
            });
		}

		[Test]
		public void CreateDFUNTest()
		{
			var data = new byte[]
			{
				0x60,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DFUN"));
            });
		}

		[Test]
		public void CreateGLOCTest()
		{
			var data = new byte[]
			{
				0x61,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("GLOC"));
            });
		}

		[Test]
		public void CreateERRTest()
		{
			var data = new byte[]
			{
				0x63,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ERR"));
            });
		}

		[Test]
		public void CreateCMDERRTest()
		{
			var data = new byte[]
			{
				0x6F,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("CMDERR"));
            });
		}

		[Test]
		public void CreateEVNLFTest()
		{
			var data = new byte[]
			{
				0x70,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EVNLF"));
            });
		}

		[Test]
		public void CreateNVRDTest()
		{
			var data = new byte[]
			{
				0x71,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NVRD"));
            });
		}

		[Test]
		public void CreateNENRDTest()
		{
			var data = new byte[]
			{
				0x72,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NENRD"));
            });
		}

		[Test]
		public void CreateRQNPNTest()
		{
			var data = new byte[]
			{
				0x73,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RQNPN"));
            });
		}

		[Test]
		public void CreateNUMEVTest()
		{
			var data = new byte[]
			{
				0x74,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NUMEV"));
            });
		}

		[Test]
		public void CreateCANIDTest()
		{
			var data = new byte[]
			{
				0x75,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("CANID"));
            });
		}

		[Test]
		public void CreateEXTC2Test()
		{
			var data = new byte[]
			{
				0x7F,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EXTC2"));
            });
		}

		[Test]
		public void CreateRDCC3Test()
		{
			var data = new byte[]
			{
				0x80,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RDCC3"));
            });
		}

		[Test]
		public void CreateWCVOTest()
		{
			var data = new byte[]
			{
				0x82,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("WCVO"));
            });
		}

		[Test]
		public void CreateWCVBTest()
		{
			var data = new byte[]
			{
				0x83,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("WCVB"));
            });
		}

		[Test]
		public void CreateQCVSTest()
		{
			var data = new byte[]
			{
				0x84,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("QCVS"));
            });
		}

		[Test]
		public void CreatePCVSTest()
		{
			var data = new byte[]
			{
				0x85,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("PCVS"));
            });
		}

		[Test]
		public void CreateACONTest()
		{
			var data = new byte[]
			{
				0x90,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACON"));
            });
		}

		[Test]
		public void CreateACOFTest()
		{
			var data = new byte[]
			{
				0x91,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACOF"));
            });
		}

		[Test]
		public void CreateAREQTest()
		{
			var data = new byte[]
			{
				0x92,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("AREQ"));
            });
		}

		[Test]
		public void CreateARONTest()
		{
			var data = new byte[]
			{
				0x93,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARON"));
            });
		}

		[Test]
		public void CreateAROFTest()
		{
			var data = new byte[]
			{
				0x94,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("AROF"));
            });
		}

		[Test]
		public void CreateEVULNTest()
		{
			var data = new byte[]
			{
				0x95,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EVULN"));
            });
		}

		[Test]
		public void CreateNVSETTest()
		{
			var data = new byte[]
			{
				0x96,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NVSET"));
            });
		}

		[Test]
		public void CreateNVANSTest()
		{
			var data = new byte[]
			{
				0x97,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NVANS"));
            });
		}

		[Test]
		public void CreateASONTest()
		{
			var data = new byte[]
			{
				0x98,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASON"));
            });
		}

		[Test]
		public void CreateASOFTest()
		{
			var data = new byte[]
			{
				0x99,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASOF"));
            });
		}

		[Test]
		public void CreateASRQTest()
		{
			var data = new byte[]
			{
				0x9A,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASRQ"));
            });
		}

		[Test]
		public void CreatePARANTest()
		{
			var data = new byte[]
			{
				0x9B,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("PARAN"));
            });
		}

		[Test]
		public void CreateREVALTest()
		{
			var data = new byte[]
			{
				0x9C,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("REVAL"));
            });
		}

		[Test]
		public void CreateARSONTest()
		{
			var data = new byte[]
			{
				0x9D,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARSON"));
            });
		}

		[Test]
		public void CreateARSOFTest()
		{
			var data = new byte[]
			{
				0x9E,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARSOF"));
            });
		}

		[Test]
		public void CreateEXTC3Test()
		{
			var data = new byte[]
			{
				0x9F,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EXTC3"));
            });
		}

		[Test]
		public void CreateRDCC4Test()
		{
			var data = new byte[]
			{
				0xA0,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RDCC4"));
            });
		}

		[Test]
		public void CreateWCVSTest()
		{
			var data = new byte[]
			{
				0xA2,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("WCVS"));
            });
		}

		[Test]
		public void CreateACON1Test()
		{
			var data = new byte[]
			{
				0xB0,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACON1"));
            });
		}

		[Test]
		public void CreateACOF1Test()
		{
			var data = new byte[]
			{
				0xB1,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACOF1"));
            });
		}

		[Test]
		public void CreateREQEVTest()
		{
			var data = new byte[]
			{
				0xB2,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("REQEV"));
            });
		}

		[Test]
		public void CreateARON1Test()
		{
			var data = new byte[]
			{
				0xB3,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARON1"));
            });
		}

		[Test]
		public void CreateAROF1Test()
		{
			var data = new byte[]
			{
				0xB4,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("AROF1"));
            });
		}

		[Test]
		public void CreateNEVALTest()
		{
			var data = new byte[]
			{
				0xB5,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NEVAL"));
            });
		}

		[Test]
		public void CreatePNNTest()
		{
			var data = new byte[]
			{
				0xB6,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("PNN"));
            });
		}

		[Test]
		public void CreateASON1Test()
		{
			var data = new byte[]
			{
				0xB8,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASON1"));
            });
		}

		[Test]
		public void CreateASOF1Test()
		{
			var data = new byte[]
			{
				0xB9,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASOF1"));
            });
		}

		[Test]
		public void CreateARSON1Test()
		{
			var data = new byte[]
			{
				0xBD,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARSON1"));
            });
		}

		[Test]
		public void CreateARSOF1Test()
		{
			var data = new byte[]
			{
				0xBE,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARSOF1"));
            });
		}

		[Test]
		public void CreateEXTC4Test()
		{
			var data = new byte[]
			{
				0xBF,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EXTC4"));
            });
		}

		[Test]
		public void CreateRDCC5Test()
		{
			var data = new byte[]
			{
				0xC0,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RDCC5"));
            });
		}

		[Test]
		public void CreateWCVOATest()
		{
			var data = new byte[]
			{
				0xC1,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("WCVOA"));
            });
		}

		[Test]
		public void CreateCABDATTest()
		{
			var data = new byte[]
			{
				0xC2,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("CABDAT"));
            });
		}

		[Test]
		public void CreateFCLKTest()
		{
			var data = new byte[]
			{
				0xCF,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("FCLK"));
            });
		}

		[Test]
		public void CreateACON2Test()
		{
			var data = new byte[]
			{
				0xD0,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACON2"));
            });
		}

		[Test]
		public void CreateACOF2Test()
		{
			var data = new byte[]
			{
				0xD1,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACOF2"));
            });
		}

		[Test]
		public void CreateEVLRNTest()
		{
			var data = new byte[]
			{
				0xd2,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EVLRN"));
            });
		}

		[Test]
		public void CreateEVANSTest()
		{
			var data = new byte[]
			{
				0xd3,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EVANS"));
            });
		}

		[Test]
		public void CreateARON2Test()
		{
			var data = new byte[]
			{
				0xD4,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARON2"));
            });
		}

		[Test]
		public void CreateAROF2Test()
		{
			var data = new byte[]
			{
				0xD5,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("AROF2"));
            });
		}

		[Test]
		public void CreateASON2Test()
		{
			var data = new byte[]
			{
				0xD8,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASON2"));
            });
		}

		[Test]
		public void CreateASOF2Test()
		{
			var data = new byte[]
			{
				0xD9,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASOF2"));
            });
		}

		[Test]
		public void CreateARSON2Test()
		{
			var data = new byte[]
			{
				0xDD,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARSON2"));
            });
		}

		[Test]
		public void CreateARSOF2Test()
		{
			var data = new byte[]
			{
				0xDE,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARSOF2"));
            });
		}

		[Test]
		public void CreateEXTC5Test()
		{
			var data = new byte[]
			{
				0xDF,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EXTC5"));
            });
		}

		[Test]
		public void CreateRDCC6Test()
		{
			var data = new byte[]
			{
				0xE0,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RDCC6"));
            });
		}

		[Test]
		public void CreatePLOCTest()
		{
			var data = new byte[]
			{
				0xE1,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("PLOC"));
            });
		}

		[Test]
		public void CreateNAMETest()
		{
			var data = new byte[]
			{
				0xE2,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NAME"));
            });
		}

		[Test]
		public void CreateSTATTest()
		{
			var data = new byte[]
			{
				0xE3,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("STAT"));
            });
		}

		[Test]
		public void CreateDTXCTest()
		{
			var data = new byte[]
			{
				0xE9,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DTXC"));
            });
		}

		[Test]
		public void CreatePARAMSTest()
		{
			var data = new byte[]
			{
				0xEF,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("PARAMS"));
            });
		}

		[Test]
		public void CreateACON3Test()
		{
			var data = new byte[]
			{
				0xF0,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACON3"));
            });
		}

		[Test]
		public void CreateACOF3Test()
		{
			var data = new byte[]
			{
				0xF1,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACOF3"));
            });
		}

		[Test]
		public void CreateENRSPTest()
		{
			var data = new byte[]
			{
				0xF2,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ENRSP"));
            });
		}

		[Test]
		public void CreateARON3Test()
		{
			var data = new byte[]
			{
				0xF3,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARON3"));
            });
		}

		[Test]
		public void CreateAROF3Test()
		{
			var data = new byte[]
			{
				0xF4,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("AROF3"));
            });
		}

		[Test]
		public void CreateEVLRNITest()
		{
			var data = new byte[]
			{
				0xF5,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EVLRNI"));
            });
		}

		[Test]
		public void CreateACDATTest()
		{
			var data = new byte[]
			{
				0xF6,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACDAT"));
            });
		}

		[Test]
		public void CreateARDATTest()
		{
			var data = new byte[]
			{
				0xF7,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARDAT"));
            });
		}

		[Test]
		public void CreateASON3Test()
		{
			var data = new byte[]
			{
				0xF8,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASON3"));
            });
		}

		[Test]
		public void CreateASOF3Test()
		{
			var data = new byte[]
			{
				0xF9,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASOF3"));
            });
		}

		[Test]
		public void CreateDDESTest()
		{
			var data = new byte[]
			{
				0xFA,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DDES"));
            });
		}

		[Test]
		public void CreateDDRSTest()
		{
			var data = new byte[]
			{
				0xFB,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DDRS"));
            });
		}

		[Test]
		public void CreateDDWSTest()
		{
			var data = new byte[]
			{
				0xFC,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DDWS"));
            });
		}

		[Test]
		public void CreateARSON3Test()
		{
			var data = new byte[]
			{
				0xFD,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARSON3"));
            });
		}

		[Test]
		public void CreateARSOF3Test()
		{
			var data = new byte[]
			{
				0xFE,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARSOF3"));
            });
		}

		[Test]
		public void CreateEXTC6Test()
		{
			var data = new byte[]
			{
				0xFF,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EXTC6"));
            });
		}
	}
}
