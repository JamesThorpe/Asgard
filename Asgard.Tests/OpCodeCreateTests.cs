using Asgard.Data;
using NUnit.Framework;

/*	This file is automatically generated by a T4 template from a data file.
	C:\Users\richa\source\repos\Asgard\Asgard.Tests\cbusdefs.csv
	Any changes made manually will be lost when the file is regenerated.
*/

namespace Asgard.Tests
{
	[TestFixture]
	public class OpCodeCreateTests
	{
		[SetUp]
		public void Setup()
		{
		}


		[Test]
		public void CreateACKTest() // 0x00 0
		{
			var data = new byte[]
			{
				0x00,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACK"));
            });
		}

		[Test]
		public void CreateNAKTest() // 0x01 1
		{
			var data = new byte[]
			{
				0x01,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NAK"));
            });
		}

		[Test]
		public void CreateHLTTest() // 0x02 2
		{
			var data = new byte[]
			{
				0x02,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("HLT"));
            });
		}

		[Test]
		public void CreateBONTest() // 0x03 3
		{
			var data = new byte[]
			{
				0x03,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("BON"));
            });
		}

		[Test]
		public void CreateTOFTest() // 0x04 4
		{
			var data = new byte[]
			{
				0x04,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("TOF"));
            });
		}

		[Test]
		public void CreateTONTest() // 0x05 5
		{
			var data = new byte[]
			{
				0x05,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("TON"));
            });
		}

		[Test]
		public void CreateESTOPTest() // 0x06 6
		{
			var data = new byte[]
			{
				0x06,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ESTOP"));
            });
		}

		[Test]
		public void CreateARSTTest() // 0x07 7
		{
			var data = new byte[]
			{
				0x07,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARST"));
            });
		}

		[Test]
		public void CreateRTOFTest() // 0x08 8
		{
			var data = new byte[]
			{
				0x08,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RTOF"));
            });
		}

		[Test]
		public void CreateRTONTest() // 0x09 9
		{
			var data = new byte[]
			{
				0x09,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RTON"));
            });
		}

		[Test]
		public void CreateRESTPTest() // 0x0a 10
		{
			var data = new byte[]
			{
				0x0a,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RESTP"));
            });
		}

		[Test]
		public void CreateRSTATTest() // 0x0c 12
		{
			var data = new byte[]
			{
				0x0c,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RSTAT"));
            });
		}

		[Test]
		public void CreateQNNTest() // 0x0d 13
		{
			var data = new byte[]
			{
				0x0d,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("QNN"));
            });
		}

		[Test]
		public void CreateRQNPTest() // 0x10 16
		{
			var data = new byte[]
			{
				0x10,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RQNP"));
            });
		}

		[Test]
		public void CreateRQMNTest() // 0x11 17
		{
			var data = new byte[]
			{
				0x11,
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RQMN"));
            });
		}

		[Test]
		public void CreateKLOCTest() // 0x21 33
		{
			var data = new byte[]
			{
				0x21,
				0, // data-byte 0
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("KLOC"));
            });
		}

		[Test]
		public void CreateQLOCTest() // 0x22 34
		{
			var data = new byte[]
			{
				0x22,
				0, // data-byte 0
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("QLOC"));
            });
		}

		[Test]
		public void CreateDKEEPTest() // 0x23 35
		{
			var data = new byte[]
			{
				0x23,
				0, // data-byte 0
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DKEEP"));
            });
		}

		[Test]
		public void CreateDBG1Test() // 0x30 48
		{
			var data = new byte[]
			{
				0x30,
				0, // data-byte 0
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DBG1"));
            });
		}

		[Test]
		public void CreateEXTCTest() // 0x3F 63
		{
			var data = new byte[]
			{
				0x3F,
				0, // data-byte 0
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EXTC"));
            });
		}

		[Test]
		public void CreateRLOCTest() // 0x40 64
		{
			var data = new byte[]
			{
				0x40,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RLOC"));
            });
		}

		[Test]
		public void CreateQCONTest() // 0x41 65
		{
			var data = new byte[]
			{
				0x41,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("QCON"));
            });
		}

		[Test]
		public void CreateSNNTest() // 0x42 66
		{
			var data = new byte[]
			{
				0x42,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("SNN"));
            });
		}

		[Test]
		public void CreateSTMODTest() // 0x44 68
		{
			var data = new byte[]
			{
				0x44,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("STMOD"));
            });
		}

		[Test]
		public void CreatePCONTest() // 0x45 69
		{
			var data = new byte[]
			{
				0x45,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("PCON"));
            });
		}

		[Test]
		public void CreateKCONTest() // 0x46 70
		{
			var data = new byte[]
			{
				0x46,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("KCON"));
            });
		}

		[Test]
		public void CreateDSPDTest() // 0x47 71
		{
			var data = new byte[]
			{
				0x47,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DSPD"));
            });
		}

		[Test]
		public void CreateDFLGTest() // 0x48 72
		{
			var data = new byte[]
			{
				0x48,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DFLG"));
            });
		}

		[Test]
		public void CreateDFNONTest() // 0x49 73
		{
			var data = new byte[]
			{
				0x49,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DFNON"));
            });
		}

		[Test]
		public void CreateDFNOFTest() // 0x4A 74
		{
			var data = new byte[]
			{
				0x4A,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DFNOF"));
            });
		}

		[Test]
		public void CreateSSTATTest() // 0x4C 76
		{
			var data = new byte[]
			{
				0x4C,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("SSTAT"));
            });
		}

		[Test]
		[Ignore("Not in version 6b")]
		public void CreateNNRSMTest() // 0x4F 79
		{
			var data = new byte[]
			{
				0x4F,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NNRSM"));
            });
		}

		[Test]
		public void CreateRQNNTest() // 0x50 80
		{
			var data = new byte[]
			{
				0x50,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RQNN"));
            });
		}

		[Test]
		public void CreateNNRELTest() // 0x51 81
		{
			var data = new byte[]
			{
				0x51,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NNREL"));
            });
		}

		[Test]
		public void CreateNNACKTest() // 0x52 82
		{
			var data = new byte[]
			{
				0x52,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NNACK"));
            });
		}

		[Test]
		public void CreateNNLRNTest() // 0x53 83
		{
			var data = new byte[]
			{
				0x53,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NNLRN"));
            });
		}

		[Test]
		public void CreateNNULNTest() // 0x54 84
		{
			var data = new byte[]
			{
				0x54,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NNULN"));
            });
		}

		[Test]
		public void CreateNNCLRTest() // 0x55 85
		{
			var data = new byte[]
			{
				0x55,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NNCLR"));
            });
		}

		[Test]
		public void CreateNNEVNTest() // 0x56 86
		{
			var data = new byte[]
			{
				0x56,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NNEVN"));
            });
		}

		[Test]
		public void CreateNERDTest() // 0x57 87
		{
			var data = new byte[]
			{
				0x57,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NERD"));
            });
		}

		[Test]
		public void CreateRQEVNTest() // 0x58 88
		{
			var data = new byte[]
			{
				0x58,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RQEVN"));
            });
		}

		[Test]
		public void CreateWRACKTest() // 0x59 89
		{
			var data = new byte[]
			{
				0x59,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("WRACK"));
            });
		}

		[Test]
		public void CreateRQDATTest() // 0x5A 90
		{
			var data = new byte[]
			{
				0x5A,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RQDAT"));
            });
		}

		[Test]
		public void CreateRQDDSTest() // 0x5B 91
		{
			var data = new byte[]
			{
				0x5B,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RQDDS"));
            });
		}

		[Test]
		[Ignore("Incorrect name in cbusdefs")]
		public void CreateBOOTTest() // 0x5C 92
		{
			var data = new byte[]
			{
				0x5C,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("BOOT"));
            });
		}

		[Test]
		public void CreateENUMTest() // 0x5D 93
		{
			var data = new byte[]
			{
				0x5D,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ENUM"));
            });
		}

		[Test]
		[Ignore("Not in version 6b")]
		public void CreateNNRSTTest() // 0x5E 94
		{
			var data = new byte[]
			{
				0x5E,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NNRST"));
            });
		}

		[Test]
		public void CreateEXTC1Test() // 0x5F 95
		{
			var data = new byte[]
			{
				0x5F,
				0, // data-byte 0
				0, // data-byte 1
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EXTC1"));
            });
		}

		[Test]
		public void CreateDFUNTest() // 0x60 96
		{
			var data = new byte[]
			{
				0x60,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DFUN"));
            });
		}

		[Test]
		public void CreateGLOCTest() // 0x61 97
		{
			var data = new byte[]
			{
				0x61,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("GLOC"));
            });
		}

		[Test]
		public void CreateERRTest() // 0x63 99
		{
			var data = new byte[]
			{
				0x63,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ERR"));
            });
		}

		[Test]
		public void CreateCMDERRTest() // 0x6F 111
		{
			var data = new byte[]
			{
				0x6F,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("CMDERR"));
            });
		}

		[Test]
		public void CreateEVNLFTest() // 0x70 112
		{
			var data = new byte[]
			{
				0x70,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EVNLF"));
            });
		}

		[Test]
		public void CreateNVRDTest() // 0x71 113
		{
			var data = new byte[]
			{
				0x71,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NVRD"));
            });
		}

		[Test]
		public void CreateNENRDTest() // 0x72 114
		{
			var data = new byte[]
			{
				0x72,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NENRD"));
            });
		}

		[Test]
		public void CreateRQNPNTest() // 0x73 115
		{
			var data = new byte[]
			{
				0x73,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RQNPN"));
            });
		}

		[Test]
		public void CreateNUMEVTest() // 0x74 116
		{
			var data = new byte[]
			{
				0x74,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NUMEV"));
            });
		}

		[Test]
		public void CreateCANIDTest() // 0x75 117
		{
			var data = new byte[]
			{
				0x75,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("CANID"));
            });
		}

		[Test]
		public void CreateEXTC2Test() // 0x7F 127
		{
			var data = new byte[]
			{
				0x7F,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EXTC2"));
            });
		}

		[Test]
		public void CreateRDCC3Test() // 0x80 128
		{
			var data = new byte[]
			{
				0x80,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RDCC3"));
            });
		}

		[Test]
		public void CreateWCVOTest() // 0x82 130
		{
			var data = new byte[]
			{
				0x82,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("WCVO"));
            });
		}

		[Test]
		public void CreateWCVBTest() // 0x83 131
		{
			var data = new byte[]
			{
				0x83,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("WCVB"));
            });
		}

		[Test]
		public void CreateQCVSTest() // 0x84 132
		{
			var data = new byte[]
			{
				0x84,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("QCVS"));
            });
		}

		[Test]
		public void CreatePCVSTest() // 0x85 133
		{
			var data = new byte[]
			{
				0x85,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("PCVS"));
            });
		}

		[Test]
		public void CreateACONTest() // 0x90 144
		{
			var data = new byte[]
			{
				0x90,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACON"));
            });
		}

		[Test]
		public void CreateACOFTest() // 0x91 145
		{
			var data = new byte[]
			{
				0x91,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACOF"));
            });
		}

		[Test]
		public void CreateAREQTest() // 0x92 146
		{
			var data = new byte[]
			{
				0x92,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("AREQ"));
            });
		}

		[Test]
		public void CreateARONTest() // 0x93 147
		{
			var data = new byte[]
			{
				0x93,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARON"));
            });
		}

		[Test]
		public void CreateAROFTest() // 0x94 148
		{
			var data = new byte[]
			{
				0x94,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("AROF"));
            });
		}

		[Test]
		public void CreateEVULNTest() // 0x95 149
		{
			var data = new byte[]
			{
				0x95,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EVULN"));
            });
		}

		[Test]
		public void CreateNVSETTest() // 0x96 150
		{
			var data = new byte[]
			{
				0x96,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NVSET"));
            });
		}

		[Test]
		public void CreateNVANSTest() // 0x97 151
		{
			var data = new byte[]
			{
				0x97,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NVANS"));
            });
		}

		[Test]
		public void CreateASONTest() // 0x98 152
		{
			var data = new byte[]
			{
				0x98,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASON"));
            });
		}

		[Test]
		public void CreateASOFTest() // 0x99 153
		{
			var data = new byte[]
			{
				0x99,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASOF"));
            });
		}

		[Test]
		public void CreateASRQTest() // 0x9A 154
		{
			var data = new byte[]
			{
				0x9A,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASRQ"));
            });
		}

		[Test]
		public void CreatePARANTest() // 0x9B 155
		{
			var data = new byte[]
			{
				0x9B,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("PARAN"));
            });
		}

		[Test]
		public void CreateREVALTest() // 0x9C 156
		{
			var data = new byte[]
			{
				0x9C,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("REVAL"));
            });
		}

		[Test]
		public void CreateARSONTest() // 0x9D 157
		{
			var data = new byte[]
			{
				0x9D,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARSON"));
            });
		}

		[Test]
		public void CreateARSOFTest() // 0x9E 158
		{
			var data = new byte[]
			{
				0x9E,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARSOF"));
            });
		}

		[Test]
		public void CreateEXTC3Test() // 0x9F 159
		{
			var data = new byte[]
			{
				0x9F,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EXTC3"));
            });
		}

		[Test]
		public void CreateRDCC4Test() // 0xA0 160
		{
			var data = new byte[]
			{
				0xA0,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RDCC4"));
            });
		}

		[Test]
		public void CreateWCVSTest() // 0xA2 162
		{
			var data = new byte[]
			{
				0xA2,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("WCVS"));
            });
		}

		[Test]
		public void CreateACON1Test() // 0xB0 176
		{
			var data = new byte[]
			{
				0xB0,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACON1"));
            });
		}

		[Test]
		public void CreateACOF1Test() // 0xB1 177
		{
			var data = new byte[]
			{
				0xB1,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACOF1"));
            });
		}

		[Test]
		public void CreateREQEVTest() // 0xB2 178
		{
			var data = new byte[]
			{
				0xB2,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("REQEV"));
            });
		}

		[Test]
		public void CreateARON1Test() // 0xB3 179
		{
			var data = new byte[]
			{
				0xB3,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARON1"));
            });
		}

		[Test]
		public void CreateAROF1Test() // 0xB4 180
		{
			var data = new byte[]
			{
				0xB4,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("AROF1"));
            });
		}

		[Test]
		public void CreateNEVALTest() // 0xB5 181
		{
			var data = new byte[]
			{
				0xB5,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NEVAL"));
            });
		}

		[Test]
		public void CreatePNNTest() // 0xB6 182
		{
			var data = new byte[]
			{
				0xB6,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("PNN"));
            });
		}

		[Test]
		public void CreateASON1Test() // 0xB8 184
		{
			var data = new byte[]
			{
				0xB8,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASON1"));
            });
		}

		[Test]
		public void CreateASOF1Test() // 0xB9 185
		{
			var data = new byte[]
			{
				0xB9,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASOF1"));
            });
		}

		[Test]
		public void CreateARSON1Test() // 0xBD 189
		{
			var data = new byte[]
			{
				0xBD,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARSON1"));
            });
		}

		[Test]
		public void CreateARSOF1Test() // 0xBE 190
		{
			var data = new byte[]
			{
				0xBE,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARSOF1"));
            });
		}

		[Test]
		public void CreateEXTC4Test() // 0xBF 191
		{
			var data = new byte[]
			{
				0xBF,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EXTC4"));
            });
		}

		[Test]
		public void CreateRDCC5Test() // 0xC0 192
		{
			var data = new byte[]
			{
				0xC0,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RDCC5"));
            });
		}

		[Test]
		public void CreateWCVOATest() // 0xC1 193
		{
			var data = new byte[]
			{
				0xC1,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("WCVOA"));
            });
		}

		[Test]
		[Ignore("Not in version 6b")]
		public void CreateCABDATTest() // 0xC2 194
		{
			var data = new byte[]
			{
				0xC2,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("CABDAT"));
            });
		}

		[Test]
		public void CreateFCLKTest() // 0xCF 207
		{
			var data = new byte[]
			{
				0xCF,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("FCLK"));
            });
		}

		[Test]
		public void CreateACON2Test() // 0xD0 208
		{
			var data = new byte[]
			{
				0xD0,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACON2"));
            });
		}

		[Test]
		public void CreateACOF2Test() // 0xD1 209
		{
			var data = new byte[]
			{
				0xD1,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACOF2"));
            });
		}

		[Test]
		public void CreateEVLRNTest() // 0xd2 210
		{
			var data = new byte[]
			{
				0xd2,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EVLRN"));
            });
		}

		[Test]
		public void CreateEVANSTest() // 0xd3 211
		{
			var data = new byte[]
			{
				0xd3,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EVANS"));
            });
		}

		[Test]
		public void CreateARON2Test() // 0xD4 212
		{
			var data = new byte[]
			{
				0xD4,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARON2"));
            });
		}

		[Test]
		public void CreateAROF2Test() // 0xD5 213
		{
			var data = new byte[]
			{
				0xD5,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("AROF2"));
            });
		}

		[Test]
		public void CreateASON2Test() // 0xD8 216
		{
			var data = new byte[]
			{
				0xD8,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASON2"));
            });
		}

		[Test]
		public void CreateASOF2Test() // 0xD9 217
		{
			var data = new byte[]
			{
				0xD9,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASOF2"));
            });
		}

		[Test]
		public void CreateARSON2Test() // 0xDD 221
		{
			var data = new byte[]
			{
				0xDD,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARSON2"));
            });
		}

		[Test]
		public void CreateARSOF2Test() // 0xDE 222
		{
			var data = new byte[]
			{
				0xDE,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARSOF2"));
            });
		}

		[Test]
		public void CreateEXTC5Test() // 0xDF 223
		{
			var data = new byte[]
			{
				0xDF,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EXTC5"));
            });
		}

		[Test]
		public void CreateRDCC6Test() // 0xE0 224
		{
			var data = new byte[]
			{
				0xE0,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("RDCC6"));
            });
		}

		[Test]
		public void CreatePLOCTest() // 0xE1 225
		{
			var data = new byte[]
			{
				0xE1,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("PLOC"));
            });
		}

		[Test]
		public void CreateNAMETest() // 0xE2 226
		{
			var data = new byte[]
			{
				0xE2,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("NAME"));
            });
		}

		[Test]
		public void CreateSTATTest() // 0xE3 227
		{
			var data = new byte[]
			{
				0xE3,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("STAT"));
            });
		}

		[Test]
		[Ignore("Not in version 6b")]
		public void CreateDTXCTest() // 0xE9 233
		{
			var data = new byte[]
			{
				0xE9,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DTXC"));
            });
		}

		[Test]
		public void CreatePARAMSTest() // 0xEF 239
		{
			var data = new byte[]
			{
				0xEF,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("PARAMS"));
            });
		}

		[Test]
		public void CreateACON3Test() // 0xF0 240
		{
			var data = new byte[]
			{
				0xF0,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACON3"));
            });
		}

		[Test]
		public void CreateACOF3Test() // 0xF1 241
		{
			var data = new byte[]
			{
				0xF1,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACOF3"));
            });
		}

		[Test]
		public void CreateENRSPTest() // 0xF2 242
		{
			var data = new byte[]
			{
				0xF2,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ENRSP"));
            });
		}

		[Test]
		public void CreateARON3Test() // 0xF3 243
		{
			var data = new byte[]
			{
				0xF3,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARON3"));
            });
		}

		[Test]
		public void CreateAROF3Test() // 0xF4 244
		{
			var data = new byte[]
			{
				0xF4,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("AROF3"));
            });
		}

		[Test]
		public void CreateEVLRNITest() // 0xF5 245
		{
			var data = new byte[]
			{
				0xF5,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EVLRNI"));
            });
		}

		[Test]
		public void CreateACDATTest() // 0xF6 246
		{
			var data = new byte[]
			{
				0xF6,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ACDAT"));
            });
		}

		[Test]
		public void CreateARDATTest() // 0xF7 247
		{
			var data = new byte[]
			{
				0xF7,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARDAT"));
            });
		}

		[Test]
		public void CreateASON3Test() // 0xF8 248
		{
			var data = new byte[]
			{
				0xF8,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASON3"));
            });
		}

		[Test]
		public void CreateASOF3Test() // 0xF9 249
		{
			var data = new byte[]
			{
				0xF9,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ASOF3"));
            });
		}

		[Test]
		public void CreateDDESTest() // 0xFA 250
		{
			var data = new byte[]
			{
				0xFA,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DDES"));
            });
		}

		[Test]
		public void CreateDDRSTest() // 0xFB 251
		{
			var data = new byte[]
			{
				0xFB,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DDRS"));
            });
		}

		[Test]
		[Ignore("Not in version 6b")]
		public void CreateDDWSTest() // 0xFC 252
		{
			var data = new byte[]
			{
				0xFC,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("DDWS"));
            });
		}

		[Test]
		public void CreateARSON3Test() // 0xFD 253
		{
			var data = new byte[]
			{
				0xFD,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARSON3"));
            });
		}

		[Test]
		public void CreateARSOF3Test() // 0xFE 254
		{
			var data = new byte[]
			{
				0xFE,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("ARSOF3"));
            });
		}

		[Test]
		public void CreateEXTC6Test() // 0xFF 255
		{
			var data = new byte[]
			{
				0xFF,
				0, // data-byte 0
				0, // data-byte 1
				0, // data-byte 2
				0, // data-byte 3
				0, // data-byte 4
				0, // data-byte 5
				0, // data-byte 6
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.GetType().Name, Is.EqualTo("EXTC6"));
            });
		}
	}
}
