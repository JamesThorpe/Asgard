<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
<#	var filename = this.Host.ResolvePath("cbusdefs.csv");
	var textlines = File.ReadLines(filename);

	var ignores =
		new Dictionary<string, string>
		{
			["CABDAT"] = "Not in version 6b",
			["DDWS"]   = "Not in version 6b",
			["DTXC"]   = "Not in version 6b",
			["NNRSM"]  = "Not in version 6b",
			["NNRST"]  = "Not in version 6b",
		};
		
	var opcodelines = 
		textlines
			.Where(n => n.StartsWith("CbusOpCodes,"))
			.ToList();

	var opcodedata =
		opcodelines
			.Select(n => n.Split(','))
			.Where(n => n.Length >= 4)
			.Where(n => n[2].StartsWith("0x"))
			.ToList();

	var opcodes =
		opcodedata
			.Select(n => n[2])
			.Distinct()
			.OrderBy(n => n)
			.ToList();
#>
using Asgard.Data;
using NUnit.Framework;

/*	This file is automatically generated by a T4 template from a data file.
	<#= filename #>
	Any changes made manually will be lost when the file is regenerated.
*/

namespace Asgard.Tests
{
	[TestFixture]
	public class OpCodeCreateTests
	{
		[SetUp]
		public void Setup()
		{
		}

<#	foreach(var opcodeNumber in opcodes)
	{
		var opcode = 
			opcodedata
				.FirstOrDefault(n => n[2] == opcodeNumber);
		if (opcode is null) continue;
		var opcodeName = opcode[1];
		if (opcodeName.StartsWith("OPC_"))
			opcodeName = opcodeName.Substring(4);
		var opcodeValue = byte.Parse(opcodeNumber.Substring(2), NumberStyles.HexNumber);
		var dataLength = opcodeValue >> 5;
#>

		[Test]
<#		if (ignores.ContainsKey(opcodeName))
		{
#>
		[Ignore("<#= ignores[opcodeName] #>")]
<#		}
#>
		public void Create<#= opcodeName #>Test() // <#= opcodeNumber #> <#= opcodeValue #>
		{
			var data = new byte[]
			{
				<#= opcodeNumber #>,
<#		for(var i = 0; i < dataLength; i++)
		{
#>
				0, // data-byte <#= i #>
<#		}
#>
			};
			var cbusMessage = CbusMessage.Create(data);

			var opcode = OpCodeData.Create(cbusMessage);

            Assert.Multiple(() =>
            {
                Assert.That(opcode, Is.Not.Null);
                Assert.That(opcode?.Code, Is.EqualTo("<#= opcodeName #>"));
            });
		}
<#	}
#>
	}
}
